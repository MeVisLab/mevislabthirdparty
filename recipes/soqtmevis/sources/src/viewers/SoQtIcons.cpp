/*
 *
 *  Copyright (C) 2000 Silicon Graphics, Inc.  All Rights Reserved.
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 2.1 of the License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  Further, this software is distributed without any warranty that it is
 *  free of the rightful claim of any third person regarding infringement
 *  or the like.  Any license provided herein, whether implied or
 *  otherwise, applies only to this software file.  Patent licenses, if
 *  any, provided herein do not apply to combinations of this program with
 *  other software, or any other product whatsoever.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 *  Contact information: Silicon Graphics, Inc., 1600 Amphitheatre Pkwy,
 *  Mountain View, CA  94043, or:
 *
 *  http://www.sgi.com
 *
 *  For further information regarding this notice, see:
 *
 *  http://oss.sgi.com/projects/GenInfo/NoticeExplan/
 *
 */

/*
 * Copyright (C) 1990,91   Silicon Graphics, Inc.
 * Author(s): Alain Dumesny
 * Ported to Qt4 by MeVis (http://www.mevis.de), 2006
 */

#include <Inventor/Qt/SoQtIcons.h>

#include <QBitmap>
#include <QPainter>
#include <QApplication>

#define so_qt_icon_width 24
#define so_qt_icon_height 24

static const unsigned char so_qt_pick_bits[] = {
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80, 0x01, 0x00,
   0x80, 0x03, 0x00, 0x80, 0x07, 0x00, 0x80, 0x0f, 0x00, 0x80, 0x1f, 0x00,
   0x80, 0x3f, 0x00, 0x80, 0x7f, 0x00, 0x80, 0xff, 0x00, 0x80, 0xff, 0x01,
   0x80, 0xff, 0x03, 0x80, 0xff, 0x00, 0x80, 0x3f, 0x00, 0x80, 0x77, 0x00,
   0x80, 0x71, 0x00, 0x00, 0xe0, 0x00, 0x00, 0xe0, 0x00, 0x00, 0xc0, 0x01,
   0x00, 0xc0, 0x01, 0x00, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

static const unsigned char so_qt_view_bits[] = {
   0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x70, 0x69, 0x00, 0x88, 0x91, 0x00,
   0x08, 0x33, 0x01, 0x30, 0x66, 0x02, 0x20, 0x44, 0x04, 0x40, 0xcc, 0x04,
   0x80, 0x88, 0x08, 0x84, 0x08, 0x08, 0x9a, 0x00, 0x08, 0xa2, 0x00, 0x10,
   0xa2, 0x00, 0x10, 0x44, 0x00, 0x10, 0x08, 0x00, 0x10, 0x08, 0x00, 0x20,
   0x10, 0x00, 0x20, 0xe0, 0x00, 0x20, 0x00, 0x03, 0x20, 0x00, 0x04, 0x20,
   0x00, 0x08, 0x40, 0x00, 0x10, 0x80, 0x00, 0x20, 0x00, 0x00, 0x40, 0x00};

static const unsigned char so_qt_help_bits[] = {
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x73, 0x00,
   0x00, 0x77, 0x00, 0x00, 0x77, 0x00, 0x00, 0x72, 0x00, 0x00, 0x30, 0x00,
   0x00, 0x18, 0x00, 0x00, 0x08, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x1c, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

static const unsigned char so_qt_home_bits[] = {
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x80, 0x09, 0x00, 0x80, 0x1d, 0x00, 0x80, 0x37, 0x00, 0x80, 0x63, 0x00,
   0x80, 0xc1, 0x00, 0xc0, 0x80, 0x01, 0x60, 0x0e, 0x03, 0x70, 0x0a, 0x07,
   0x58, 0x0e, 0x0d, 0x48, 0x00, 0x09, 0x40, 0x00, 0x01, 0x40, 0x00, 0x01,
   0x40, 0x38, 0x01, 0x40, 0x28, 0x01, 0x40, 0x28, 0x01, 0x40, 0x28, 0x01,
   0xc0, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

static const unsigned char so_qt_set_home_bits[] = {
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0xe2,
   0x80, 0x09, 0x76, 0x80, 0x1d, 0x3e, 0x80, 0x37, 0x1e, 0x80, 0x63, 0x3e,
   0x80, 0xc1, 0x7e, 0xc0, 0x80, 0x01, 0x60, 0x0e, 0x03, 0x70, 0x0a, 0x07,
   0x58, 0x0e, 0x0d, 0x48, 0x00, 0x09, 0x40, 0x00, 0x01, 0x40, 0x00, 0x01,
   0x40, 0x38, 0x01, 0x40, 0x28, 0x01, 0x40, 0x28, 0x01, 0x40, 0x28, 0x01,
   0xc0, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

static const unsigned char so_qt_see_all_bits[] = {
   0x00, 0x00, 0x00, 0x20, 0x42, 0x04, 0x44, 0x24, 0x22, 0x88, 0xff, 0x11,
   0x90, 0x00, 0x09, 0x62, 0x3c, 0x46, 0x14, 0xc3, 0x28, 0x08, 0x99, 0x10,
   0x86, 0x3c, 0x61, 0x08, 0x99, 0x10, 0x18, 0xc3, 0x18, 0x64, 0x3c, 0x26,
   0xa2, 0x81, 0x45, 0x90, 0xff, 0x09, 0x88, 0x24, 0x13, 0xc0, 0x24, 0x06,
   0x60, 0x42, 0x0c, 0x30, 0x00, 0x08, 0x10, 0x00, 0x18, 0x18, 0xc2, 0x30,
   0x8c, 0x83, 0x63, 0x86, 0x87, 0x43, 0x82, 0x00, 0x47, 0x00, 0x00, 0x02};

static const unsigned char so_qt_seek_bits[] = {
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x1c, 0x00,
   0x00, 0x1c, 0x00, 0x00, 0x3e, 0x00, 0x80, 0xc9, 0x00, 0x40, 0x08, 0x01,
   0x40, 0x08, 0x01, 0x20, 0x08, 0x02, 0x3c, 0x00, 0x1e, 0xfc, 0xe3, 0x1f,
   0x3c, 0x00, 0x1e, 0x20, 0x08, 0x02, 0x40, 0x08, 0x01, 0x40, 0x08, 0x01,
   0x80, 0xc9, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x1c, 0x00,
   0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

static const unsigned char so_qt_ortho_bits[] = {
   0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x65, 0x00,
   0x80, 0x84, 0x01, 0x40, 0x04, 0x06, 0x20, 0x04, 0x18, 0x10, 0x04, 0x18,
   0x08, 0x04, 0x14, 0x38, 0x04, 0x12, 0xc8, 0x04, 0x11, 0x08, 0x87, 0x10,
   0x08, 0x5e, 0x10, 0x08, 0x71, 0x10, 0x88, 0xa0, 0x11, 0x48, 0x20, 0x16,
   0x28, 0x20, 0x18, 0x18, 0x20, 0x08, 0x18, 0x20, 0x04, 0x60, 0x20, 0x02,
   0x80, 0x21, 0x01, 0x00, 0xa6, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0x00};

static const unsigned char so_qt_persp_bits[] = {
   0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x65, 0x00,
   0x00, 0x85, 0x01, 0x80, 0x04, 0x06, 0x80, 0x04, 0x18, 0x40, 0x04, 0x1c,
   0x40, 0x04, 0x12, 0x20, 0x04, 0x11, 0x20, 0xc4, 0x10, 0x10, 0x24, 0x10,
   0x10, 0x1a, 0x10, 0x08, 0x69, 0x10, 0xb8, 0x84, 0x11, 0xc8, 0x03, 0x16,
   0x28, 0x01, 0x18, 0x18, 0x01, 0x0f, 0x38, 0xf1, 0x00, 0xc0, 0x0f, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

static const unsigned char so_qt_X_bits[] = {
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc7, 0x07, 0x80, 0x83, 0x03,
   0x00, 0x87, 0x01, 0x00, 0xc6, 0x00, 0x00, 0x6c, 0x00, 0x00, 0x38, 0x00,
   0x00, 0x38, 0x00, 0x00, 0x78, 0x00, 0x00, 0xfc, 0x00, 0x00, 0xe6, 0x00,
   0x00, 0xc3, 0x01, 0x80, 0x83, 0x03, 0xc0, 0xe7, 0x07, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

static const unsigned char so_qt_Y_bits[] = {
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x8f, 0x07, 0x80, 0x07, 0x03,
   0x00, 0x87, 0x01, 0x00, 0x8f, 0x00, 0x00, 0xde, 0x00, 0x00, 0x5c, 0x00,
   0x00, 0x7c, 0x00, 0x00, 0x38, 0x00, 0x00, 0x38, 0x00, 0x00, 0x38, 0x00,
   0x00, 0x38, 0x00, 0x00, 0x38, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

static const unsigned char so_qt_Z_bits[] = {
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0x01, 0x80, 0xe1, 0x01,
   0x80, 0xe0, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x78, 0x00, 0x00, 0x38, 0x00,
   0x00, 0x3c, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x0f, 0x01,
   0x80, 0x07, 0x01, 0x80, 0x83, 0x01, 0x80, 0xff, 0x01, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};


static QIcon cachedIcons [SoQtIcons::ICON_COUNT];

static QCursor* cachedCursors [SoQtIcons::CURSOR_COUNT];


QIcon SoQtIcons::getIcon (int number)
{
    if (number < 0 || number >= ICON_COUNT) {
        return QIcon();
    }
    if (cachedIcons [number].isNull()) {
        QSize size (so_qt_icon_width, so_qt_icon_height);
        const unsigned char* data = nullptr;
        QString resourceName;
        switch (number) {
        case ICON_PICK:
            resourceName = ":/images/pickMode.png";
            data = so_qt_pick_bits; break;
        case ICON_VIEW:
            resourceName = ":/images/viewMode.png";
            data = so_qt_view_bits; break;
        case ICON_HELP:
            resourceName = ":/images/help.png";
            data = so_qt_help_bits; break;
        case ICON_HOME:
            resourceName = ":/images/gotoHome.png";
            data = so_qt_home_bits; break;
        case ICON_SET_HOME:
            resourceName = ":/images/setHome.png";
            data = so_qt_set_home_bits; break;
        case ICON_VIEW_ALL:
            resourceName = ":/images/viewAll.png";
            data = so_qt_see_all_bits; break;
        case ICON_SEEK:
            resourceName = ":/images/seek.png";
            data = so_qt_seek_bits; break;
        case ICON_ORTHO:
            resourceName = ":/images/ortho.png";
            data = so_qt_ortho_bits; break;
        case ICON_PERSP:
            resourceName = ":/images/persp.png";
            data = so_qt_persp_bits; break;
        case ICON_X:
            data = so_qt_X_bits; break;
        case ICON_Y:
            data = so_qt_Y_bits; break;
        case ICON_Z:
            data = so_qt_Z_bits; break;
        }
        QIcon icon (resourceName);
        if (icon.isNull()) {
            QBitmap bits = QBitmap::fromData(size, data);
            QPixmap pix(size);
            pix.fill(Qt::black);
            pix.setMask(bits);
            icon = QIcon(pix);
        }
        cachedIcons [number] = icon;
    }
    return cachedIcons [number];
}

QCursor SoQtIcons::getCursor (int number)
{
    if (number < 0 || number >= CURSOR_COUNT) {
        return QCursor();
    }
    if (cachedCursors [number] == nullptr) {
        int hotX = -1;
        int hotY = -1;
        QString cursorName;
        switch (number) {
        case CURSOR_VIEWING:
            cursorName = "viewing_cursor";
            hotX = 1; hotY = 1;
            break;
        case CURSOR_CURVED_HAND:
            cursorName = "curved_hand_cursor";
            hotX = 4; hotY = 2;
            break;
        case CURSOR_FLAT_HAND:
            cursorName = "flat_hand_cursor";
            hotX = 13; hotY = 4;
            break;
        case CURSOR_POINTING_HAND:
            cursorName = "pointing_hand_cursor";
            hotX = 9; hotY = 4;
            break;
        case CURSOR_ROLL:
            cursorName = "roll_cursor";
            hotX = 9; hotY = 11;
            break;
        case CURSOR_TARGET:
            cursorName = "target_cursor";
            hotX = 11; hotY = 11;
            break;
        case CURSOR_NORMAL_VEC:
            cursorName = "normal_vec_cursor";
            hotX = 12; hotY = 17;
            break;
        case CURSOR_WALK:
            cursorName = "walk_cursor";
            hotX = 15; hotY = 3;
            break;
        case CURSOR_PAN:
            cursorName = "pan_cursor";
            hotX = 9; hotY = 1;
            break;
        case CURSOR_TILT:
            cursorName = "tilt_cursor";
            hotX = 7; hotY = 10;
            break;
        }

        int pixelRatio = 1;
        if (qApp->devicePixelRatio() > 1.0) {
            // use cursor image appropriate for high-resolution displays
            // (will be scaled down for normal resolution screens)
            cursorName += "@2x";
            pixelRatio = 2;
        }
        QImage cursorImage(QString(":/cursors/%1.png").arg(cursorName));
        if (!cursorImage.isNull()) {
            cursorImage.setDevicePixelRatio(pixelRatio);
            cachedCursors[number] = new QCursor(QPixmap::fromImage(cursorImage), hotX, hotY);
        }
        else {
            // fallback to default cursor
            cachedCursors[number] = new QCursor();
        }
    }
    return *(cachedCursors[number]);
}
