from conan import ConanFile
from conan.tools.cmake import CMakeToolchain, CMakeDeps, CMake, cmake_layout
from conan.tools.files import copy, rmdir, collect_libs, get
import os

# honor cpp_info.set_property("cmake_package_version_compat" , "AnyNewerVersion") in onetbb:
required_conan_version = ">=2.0.8"


class ConanRecipe(ConanFile):
    name = "openvdb"
    version = "12.1.0"
    homepage = "https://www.openvdb.org"
    description = (
        "A suite of tools for the efficient storage and manipulation "
        "of sparse volumetric data discretized on three-dimensional grids"
    )
    license = "MPL-2.0"
    settings = "os", "arch", "compiler", "build_type"
    package_type = "shared-library"
    exports_sources = ["patches/*"]

    def requirements(self):
        self.requires("glfw/[>=3.3.2]")
        self.requires("onetbb/[>=2021.4.0]", transitive_headers=True, transitive_libs=True)
        self.requires("openexr/[>=2.5.3]")
        self.requires("boost/[>=1.74.0]", transitive_headers=True)
        self.requires("c-blosc/[>=1.21.0]")
        self.requires("zlib/[>=1.2.11]")

    def layout(self):
        cmake_layout(self, src_folder="src")

    def source(self):
        get(
            self,
            sha256="ebb9652ad1d67274e2c85e6736cced5f04e313c5671ae1ae548f174cc76e9e64",
            url=f"https://github.com/AcademySoftwareFoundation/openvdb/archive/v{self.version}.tar.gz",
            strip_root=True,
        )
        # Remove FindTBB.cmake provided with OpenVDB, doesn't work with Debug mode on Windows,
        # will use the one generated by Conan instead:
        os.remove(os.path.join(self.source_folder, "cmake", "FindTBB.cmake"))

    def generate(self):
        tc = CMakeToolchain(self)
        tc.variables["CMAKE_DEBUG_POSTFIX"] = "_d"

        tc.variables["BUILD_SHARED_LIBS"] = True

        tc.variables["CONCURRENT_MALLOC"] = "None"

        # OpenVDB sets absolute RPATH paths when this option is on, making OpenVDB no longer relocatable.
        # Therefore, we disable this option (ON by default) and do it ourselves. ;)
        tc.variables["OPENVDB_ENABLE_RPATH"] = False
        tc.variables["CMAKE_SKIP_BUILD_RPATH"] = False
        tc.variables["CMAKE_BUILD_WITH_INSTALL_RPATH"] = False
        tc.variables["CMAKE_INSTALL_RPATH_USE_LINK_PATH"] = False
        if self.settings.os == "Linux":
            tc.variables["CMAKE_INSTALL_RPATH"] = "$ORIGIN;$ORIGIN/../lib"

        tc.variables["OPENVDB_CORE_STATIC"] = False
        tc.variables["USE_STATIC_DEPENDENCIES"] = False

        tc.variables["OPENVDB_FUTURE_DEPRECATION"] = False  # TODO: we should fix our code and enable this feature again
        tc.variables["OPENVDB_ENABLE_UNINSTALL"] = False

        # explicit instantiation doesn't work correctly in v9.0.0
        # on macOS release builds (building MeVisLab fails)
        tc.variables["USE_EXPLICIT_INSTANTIATION"] = self.settings.os != "Macos"

        tc.variables["OPENVDB_BUILD_UNITTESTS"] = False
        tc.variables["OPENVDB_BUILD_DOCS"] = False
        tc.variables["OPENVDB_BUILD_PYTHON_MODULE"] = False
        tc.variables["OPENVDB_BUILD_HOUDINI_SOPS"] = False
        tc.variables["OPENVDB_BUILD_MAYA_PLUGIN"] = False
        tc.variables["OPENVDB_INSTALL_CMAKE_MODULES"] = False
        tc.generate()

        cd = CMakeDeps(self)
        cd.generate()

    def build(self):
        cmake = CMake(self)
        cmake.configure()
        cmake.build()

    def package(self):
        cmake = CMake(self)
        cmake.install()

        copy(self, "LICENSE", src=self.source_folder, dst=os.path.join(self.package_folder, "licenses"))
        copy(
            self,
            "*.pdb",
            src=self.build_folder,
            dst=os.path.join(self.package_folder, "bin"),
            keep_path=False,
            excludes=["*/vc???.pdb", "*/vdb_print*.pdb"],
        )
        if self.settings.os != "Windows":
            rmdir(self, os.path.join(self.package_folder, "bin"))

    def package_info(self):
        # self.cpp_info.set_property("cpe", "")  # No CPE yet?
        self.cpp_info.set_property("purl", f"pkg:github/AcademySoftwareFoundation/openvdb@v{self.version}")
        self.cpp_info.set_property("cmake_file_name", "OpenVDB")
        self.cpp_info.set_property("cmake_target_name", "OpenVDB::OpenVDB")
        self.cpp_info.defines.append("OPENVDB_DLL")
        if self.settings.os == "Linux":
            self.cpp_info.system_libs.extend(["pthread"])
        self.cpp_info.libs = collect_libs(self)
