diff --git i/Modules/Core/Common/include/itkImageAlgorithm.h w/Modules/Core/Common/include/itkImageAlgorithm.h
index 434ba2b..34786db 100644
--- i/Modules/Core/Common/include/itkImageAlgorithm.h
+++ w/Modules/Core/Common/include/itkImageAlgorithm.h
@@ -178,9 +178,10 @@ private:
   /** Unary functor just for static_cast operator */
   template<typename TInputType, typename TOutputType>
   struct StaticCast
-    : public std::unary_function<TInputType,TOutputType>
   {
-    TOutputType operator() (const TInputType i) { return static_cast<TOutputType>(i); }
+    using argument_type = TInputType;
+    using result_type = TOutputType;
+    TOutputType operator() (const TInputType i) const { return static_cast<TOutputType>(i); }
   };
 
 
diff --git i/Modules/Numerics/FEM/include/itkFEMRobustSolver.h w/Modules/Numerics/FEM/include/itkFEMRobustSolver.h
index 0a91794..6405d51 100644
--- i/Modules/Numerics/FEM/include/itkFEMRobustSolver.h
+++ w/Modules/Numerics/FEM/include/itkFEMRobustSolver.h
@@ -371,7 +371,11 @@ class CompareLandmarkDisplacementError :
     public std::binary_function<const Load::Pointer &, const Load::Pointer &, bool>
 {
 public:
-    bool operator()(const Load::Pointer & L1 , const Load::Pointer & L2)
+    using first_argument_type = const Load::Pointer &;
+    using second_argument_type = const Load::Pointer &;
+    using result_type = bool;
+
+    bool operator()(const Load::Pointer & L1 , const Load::Pointer & L2) const
     {
     LoadNoisyLandmark * l1 = dynamic_cast<LoadNoisyLandmark*>(L1.GetPointer());
     LoadNoisyLandmark * l2 = dynamic_cast<LoadNoisyLandmark*>(L2.GetPointer());
diff --git i/Modules/Segmentation/Watersheds/include/itkWatershedSegmentTree.h w/Modules/Segmentation/Watersheds/include/itkWatershedSegmentTree.h
index f3fe998..1039ab0 100644
--- i/Modules/Segmentation/Watersheds/include/itkWatershedSegmentTree.h
+++ w/Modules/Segmentation/Watersheds/include/itkWatershedSegmentTree.h
@@ -72,19 +72,22 @@ public:
   typedef typename DequeType::value_type     ValueType;
 
   /** Boolean comparison functor for use in sorting functions.  */
-  struct merge_comp:public std:: binary_function< bool, const merge_t &,
-                                                  const merge_t & > {
-    merge_comp() {}
-    bool operator()(const merge_t & a, const merge_t & b)
+  struct merge_comp {
+    using first_argument_type = bool;
+    using second_argument_type = const merge_t &;
+    using result_type = const merge_t &;
+    bool operator()(const merge_t & a, const merge_t & b) const
     {
       return b.saliency < a.saliency;
     }
   };
 
   /** Boolean comparison functor for use in sorting functions.   */
-  struct sort_comp:public std:: binary_function< bool, const merge_t &,
-                                                 const merge_t & > {
-    bool operator()(const merge_t & a, const merge_t & b)
+  struct sort_comp {
+    using first_argument_type = bool;
+    using second_argument_type = const merge_t &;
+    using result_type = const merge_t &;
+    bool operator()(const merge_t & a, const merge_t & b) const
     {
       return a.saliency < b.Saliency;
     }
diff --git i/Modules/ThirdParty/KWSys/src/KWSys/hash_map.hxx.in w/Modules/ThirdParty/KWSys/src/KWSys/hash_map.hxx.in
index 6d4379d..121015f 100644
--- i/Modules/ThirdParty/KWSys/src/KWSys/hash_map.hxx.in
+++ w/Modules/ThirdParty/KWSys/src/KWSys/hash_map.hxx.in
@@ -57,9 +57,10 @@ namespace @KWSYS_NAMESPACE@
 
 // select1st is an extension: it is not part of the standard.
 template <class T1, class T2>
-struct hash_select1st:
-    public @KWSYS_NAMESPACE@_stl::unary_function<@KWSYS_NAMESPACE@_stl::pair<T1, T2>, T1>
+struct hash_select1st
 {
+  using argument_type = itksys_stl::pair<T1, T2>;
+  using result_type = T1;
   const T1& operator()(const @KWSYS_NAMESPACE@_stl::pair<T1, T2>& __x) const
     { return __x.first; }
 };
diff --git i/Modules/ThirdParty/KWSys/src/KWSys/hash_set.hxx.in w/Modules/ThirdParty/KWSys/src/KWSys/hash_set.hxx.in
index 5ee01a5..2bed269 100644
--- i/Modules/ThirdParty/KWSys/src/KWSys/hash_set.hxx.in
+++ w/Modules/ThirdParty/KWSys/src/KWSys/hash_set.hxx.in
@@ -57,8 +57,10 @@ namespace @KWSYS_NAMESPACE@
 
 // identity is an extension: it is not part of the standard.
 template <class _Tp>
-struct _Identity : public @KWSYS_NAMESPACE@_stl::unary_function<_Tp,_Tp>
+struct _Identity
 {
+  using argument_type = _Tp;
+  using result_type = _Tp;
   const _Tp& operator()(const _Tp& __x) const { return __x; }
 };
 
