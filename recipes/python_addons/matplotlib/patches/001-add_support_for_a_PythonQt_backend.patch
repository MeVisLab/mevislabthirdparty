diff --git a/lib/matplotlib/backends/backend_qt.py b/lib/matplotlib/backends/backend_qt.py
index 6603883..ed04f85 100644
--- a/lib/matplotlib/backends/backend_qt.py
+++ b/lib/matplotlib/backends/backend_qt.py
@@ -14,7 +14,8 @@ from matplotlib.backend_bases import (
 import matplotlib.backends.qt_editor.figureoptions as figureoptions
 from . import qt_compat
 from .qt_compat import (
-    QtCore, QtGui, QtWidgets, __version__, QT_API, _to_int, _isdeleted)
+    QtCore, QtGui, QtWidgets, __version__, QT_API, _to_int, _isdeleted, _qt_property, _getSaveFileName
+)
 
 
 # SPECIAL_KEYS are Qt::Key that do *not* return their Unicode name
@@ -103,7 +104,7 @@ def _create_qApp():
 
         # Check to make sure a QApplication from a different major version
         # of Qt is not instantiated in the process
-        if QT_API in {'PyQt6', 'PySide6'}:
+        if QT_API in {'PyQt6', 'PySide6', 'PythonQt'}:
             other_bindings = ('PyQt5', 'PySide2')
             qt_version = 6
         elif QT_API in {'PyQt5', 'PySide2'}:
@@ -245,7 +246,7 @@ class FigureCanvasQT(FigureCanvasBase, QtWidgets.QWidget):
             # The easiest way to resize the canvas is to emit a resizeEvent
             # since we implement all the logic for resizing the canvas for
             # that event.
-            event = QtGui.QResizeEvent(self.size(), self.size())
+            event = QtGui.QResizeEvent(_qt_property(self.size), _qt_property(self.size))
             self.resizeEvent(event)
 
     def _update_screen(self, screen):
@@ -492,7 +493,7 @@ class FigureCanvasQT(FigureCanvasBase, QtWidgets.QWidget):
             if not self._draw_pending:
                 return
             self._draw_pending = False
-            if self.height() <= 0 or self.width() <= 0:
+            if _qt_property(self.height) <= 0 or _qt_property(self.width) <= 0:
                 return
             try:
                 self.draw()
@@ -539,7 +540,7 @@ class MainWindow(QtWidgets.QMainWindow):
 
     def closeEvent(self, event):
         self.closing.emit()
-        super().closeEvent(event)
+        QtWidgets.QMainWindow.closeEvent(self, event)
 
 
 class FigureManagerQT(FigureManagerBase):
@@ -570,13 +571,13 @@ class FigureManagerQT(FigureManagerBase):
 
         if self.toolbar:
             self.window.addToolBar(self.toolbar)
-            tbs_height = self.toolbar.sizeHint().height()
+            tbs_height = _qt_property(self.toolbar.sizeHint).height()
         else:
             tbs_height = 0
 
         # resize the main window so it will display the canvas with the
         # requested size:
-        cs = canvas.sizeHint()
+        cs = _qt_property(canvas.sizeHint)
         cs_height = cs.height()
         height = cs_height + tbs_height
         self.window.resize(cs.width(), height)
@@ -620,8 +621,8 @@ class FigureManagerQT(FigureManagerBase):
         # rescale from physical to logical pixels.
         width = int(width / self.canvas.device_pixel_ratio)
         height = int(height / self.canvas.device_pixel_ratio)
-        extra_width = self.window.width() - self.canvas.width()
-        extra_height = self.window.height() - self.canvas.height()
+        extra_width = _qt_property(self.window.width) - _qt_property(self.canvas.width)
+        extra_height = _qt_property(self.window.height) - _qt_property(self.canvas.height)
         self.canvas.resize(width, height)
         self.window.resize(width + extra_width, height + extra_height)
 
@@ -651,7 +652,7 @@ class FigureManagerQT(FigureManagerBase):
         self.window.close()
 
     def get_window_title(self):
-        return self.window.windowTitle()
+        return _qt_property(self.window.windowTitle)
 
     def set_window_title(self, title):
         self.window.setWindowTitle(title)
@@ -684,8 +685,9 @@ class NavigationToolbar2QT(NavigationToolbar2, QtWidgets.QToolBar):
             else:
                 slot = getattr(self, callback)
                 # https://bugreports.qt.io/browse/PYSIDE-2512
-                slot = functools.wraps(slot)(functools.partial(slot))
-                slot = QtCore.Slot()(slot)
+                # MEVIS: this does not work with PythonQt
+                # slot = functools.wraps(slot)(functools.partial(slot))
+                # slot = QtCore.Slot()(slot)
 
                 a = self.addAction(self._icon(image_file + '.png'),
                                    text, slot)
@@ -728,8 +730,8 @@ class NavigationToolbar2QT(NavigationToolbar2, QtWidgets.QToolBar):
         pm = QtGui.QPixmap(filename)
         pm.setDevicePixelRatio(
             self.devicePixelRatioF() or 1)  # rarely, devicePixelRatioF=0
-        if self.palette().color(self.backgroundRole()).value() < 128:
-            icon_color = self.palette().color(self.foregroundRole())
+        if _qt_property(_qt_property(self.palette).color(self.backgroundRole()).value) < 128:
+            icon_color = _qt_property(self.palette).color(self.foregroundRole())
             mask = pm.createMaskFromColor(
                 QtGui.QColor('black'),
                 QtCore.Qt.MaskMode.MaskOutColor)
@@ -759,11 +761,17 @@ class NavigationToolbar2QT(NavigationToolbar2, QtWidgets.QToolBar):
             for i, ax in enumerate(axes):
                 if titles[i] in duplicate_titles:
                     titles[i] += f" (id: {id(ax):#x})"  # Deduplicate titles.
-            item, ok = QtWidgets.QInputDialog.getItem(
+            item = QtWidgets.QInputDialog.getItem(
                 self.canvas.parent(),
                 'Customize', 'Select Axes:', titles, 0, False)
-            if not ok:
-                return
+            if QT_API == "PythonQt":
+                # PythonQt only returns the immediate return value, not the ok flag
+                if not item:
+                    return
+            else:
+                if not item(1):
+                    return
+                item = item(0)
             ax = axes[titles.index(item)]
         figureoptions.figure_edit(ax, self)
 
@@ -825,7 +833,7 @@ class NavigationToolbar2QT(NavigationToolbar2, QtWidgets.QToolBar):
             filters.append(filter)
         filters = ';;'.join(filters)
 
-        fname, filter = QtWidgets.QFileDialog.getSaveFileName(
+        fname, filter = _getSaveFileName(
             self.canvas.parent(), "Choose a filename to save to", start,
             filters, selectedFilter)
         if fname:
@@ -851,7 +859,7 @@ class NavigationToolbar2QT(NavigationToolbar2, QtWidgets.QToolBar):
 
 class SubplotToolQt(QtWidgets.QDialog):
     def __init__(self, targetfig, parent):
-        super().__init__()
+        QtWidgets.QDialog.__init__(self)
         self.setWindowIcon(QtGui.QIcon(
             str(cbook._get_data_path("images/matplotlib.png"))))
         self.setObjectName("SubplotTool")
@@ -866,7 +874,7 @@ class SubplotToolQt(QtWidgets.QDialog):
                  ["hspace", "wspace"],
                  [("Tight layout", self._tight_layout),
                   ("Reset", self._reset),
-                  ("Close", self.close)])]:
+                  ("Close", self._close)])]:
             layout = QtWidgets.QVBoxLayout()
             main_layout.addLayout(layout)
             box = QtWidgets.QGroupBox(group)
@@ -909,13 +917,13 @@ class SubplotToolQt(QtWidgets.QDialog):
         text.setReadOnly(True)
         layout.addWidget(text)
         text.setPlainText(
-            ",\n".join(f"{attr}={spinbox.value():.3}"
+            ",\n".join(f"{attr}={_qt_property(spinbox.value):.3}"
                        for attr, spinbox in self._spinboxes.items()))
         # Adjust the height of the text widget to fit the whole text, plus
         # some padding.
-        size = text.maximumSize()
+        size = _qt_property(text.maximumSize)
         size.setHeight(
-            QtGui.QFontMetrics(text.document().defaultFont())
+            QtGui.QFontMetrics(_qt_property(text.document().defaultFont))
             .size(0, text.toPlainText()).height() + 20)
         text.setMaximumSize(size)
         self._export_values_dialog.show()
@@ -924,10 +932,10 @@ class SubplotToolQt(QtWidgets.QDialog):
         spinboxes = self._spinboxes
         # Set all mins and maxes, so that this can also be used in _reset().
         for lower, higher in [("bottom", "top"), ("left", "right")]:
-            spinboxes[higher].setMinimum(spinboxes[lower].value() + .001)
-            spinboxes[lower].setMaximum(spinboxes[higher].value() - .001)
+            spinboxes[higher].setMinimum(_qt_property(spinboxes[lower].value) + .001)
+            spinboxes[lower].setMaximum(_qt_property(spinboxes[higher].value) - .001)
         self._figure.subplots_adjust(
-            **{attr: spinbox.value() for attr, spinbox in spinboxes.items()})
+            **{attr: _qt_property(spinbox.value) for attr, spinbox in spinboxes.items()})
         self._figure.canvas.draw_idle()
 
     def _tight_layout(self):
@@ -946,6 +954,11 @@ class SubplotToolQt(QtWidgets.QDialog):
             spinbox.blockSignals(False)
         self._on_value_changed()
 
+    def _close(self):
+        # Needed because PythonQt can't do the signal/slot connection correctly
+        # because of extra argument in signal (it works if it is a Python function)
+        self.close()
+
 
 class ToolbarQt(ToolContainerBase, QtWidgets.QToolBar):
     def __init__(self, toolmanager, parent=None):
diff --git a/lib/matplotlib/backends/backend_qtagg.py b/lib/matplotlib/backends/backend_qtagg.py
index 256e50a..bacedb2 100644
--- a/lib/matplotlib/backends/backend_qtagg.py
+++ b/lib/matplotlib/backends/backend_qtagg.py
@@ -52,6 +52,8 @@ class FigureCanvasQTAgg(FigureCanvasAgg, FigureCanvasQT):
             if QT_API == "PyQt6":
                 from PyQt6 import sip
                 ptr = int(sip.voidptr(buf))
+            elif QT_API == "PythonQt":
+                ptr = buf.tobytes()
             else:
                 ptr = buf
 
diff --git a/lib/matplotlib/backends/qt_compat.py b/lib/matplotlib/backends/qt_compat.py
index d91f7c1..f6ed8bb 100644
--- a/lib/matplotlib/backends/qt_compat.py
+++ b/lib/matplotlib/backends/qt_compat.py
@@ -24,11 +24,12 @@ QT_API_PYQT6 = "PyQt6"
 QT_API_PYSIDE6 = "PySide6"
 QT_API_PYQT5 = "PyQt5"
 QT_API_PYSIDE2 = "PySide2"
+QT_API_PYTHONQT = "PythonQt"  # MeVisLab
 QT_API_ENV = os.environ.get("QT_API")
 if QT_API_ENV is not None:
     QT_API_ENV = QT_API_ENV.lower()
 _ETS = {  # Mapping of QT_API_ENV to requested binding.
-    "pyqt6": QT_API_PYQT6, "pyside6": QT_API_PYSIDE6,
+    "pyqt6": QT_API_PYQT6, "pyside6": QT_API_PYSIDE6, "pythonqt": QT_API_PYTHONQT,
     "pyqt5": QT_API_PYQT5, "pyside2": QT_API_PYSIDE2,
 }
 # First, check if anything is already imported.
@@ -36,6 +37,8 @@ if sys.modules.get("PyQt6.QtCore"):
     QT_API = QT_API_PYQT6
 elif sys.modules.get("PySide6.QtCore"):
     QT_API = QT_API_PYSIDE6
+elif "PythonQt.QtCore" in sys.modules:
+    QT_API = QT_API_PYTHONQT
 elif sys.modules.get("PyQt5.QtCore"):
     QT_API = QT_API_PYQT5
 elif sys.modules.get("PySide2.QtCore"):
@@ -46,7 +49,7 @@ elif sys.modules.get("PySide2.QtCore"):
 # triggering backend resolution (which can result in a partially but
 # incompletely imported backend_qt5).
 elif (mpl.rcParams._get_backend_or_none() or "").lower().startswith("qt5"):
-    if QT_API_ENV in ["pyqt5", "pyside2"]:
+    if QT_API_ENV in ["pyqt5", "pyside2", "pythonqt"]:
         QT_API = _ETS[QT_API_ENV]
     else:
         _QT_FORCE_QT5_BINDING = True  # noqa
@@ -65,7 +68,7 @@ else:
 
 def _setup_pyqt5plus():
     global QtCore, QtGui, QtWidgets, __version__
-    global _isdeleted, _to_int
+    global _isdeleted, _to_int, _qt_property, _getSaveFileName
 
     if QT_API == QT_API_PYQT6:
         from PyQt6 import QtCore, QtGui, QtWidgets, sip
@@ -74,15 +77,20 @@ def _setup_pyqt5plus():
         QtCore.Slot = QtCore.pyqtSlot
         QtCore.Property = QtCore.pyqtProperty
         _isdeleted = sip.isdeleted
+        def _qt_property(p): return p()
         _to_int = operator.attrgetter('value')
+        _getSaveFileName = QtWidgets.QFileDialog.getSaveFileName
     elif QT_API == QT_API_PYSIDE6:
         from PySide6 import QtCore, QtGui, QtWidgets, __version__
         import shiboken6
         def _isdeleted(obj): return not shiboken6.isValid(obj)
+        def _qt_property(p):
+            return p()
         if parse_version(__version__) >= parse_version('6.4'):
             _to_int = operator.attrgetter('value')
         else:
             _to_int = int
+        _getSaveFileName = QtWidgets.QFileDialog.getSaveFileName
     elif QT_API == QT_API_PYQT5:
         from PyQt5 import QtCore, QtGui, QtWidgets
         import sip
@@ -92,6 +100,7 @@ def _setup_pyqt5plus():
         QtCore.Property = QtCore.pyqtProperty
         _isdeleted = sip.isdeleted
         _to_int = int
+        _getSaveFileName = QtWidgets.QFileDialog.getSaveFileName
     elif QT_API == QT_API_PYSIDE2:
         from PySide2 import QtCore, QtGui, QtWidgets, __version__
         try:
@@ -100,12 +109,27 @@ def _setup_pyqt5plus():
             import shiboken2
         def _isdeleted(obj):
             return not shiboken2.isValid(obj)
+        def _qt_property(p):
+            return p()
         _to_int = int
+    elif QT_API == QT_API_PYTHONQT:
+        from PythonQt import QtCore, QtGui
+        __version__ = "2.0"
+        # For backwards compatibility (with Qt4) QtWidgets is contained in QtGui:
+        QtWidgets = QtGui
+        _to_int = int
+        def _isdeleted(obj):
+            return not bool(obj)
+        def _qt_property(p):
+            return p() if callable(p) else p
+        # PythonQt does not yet support a getSaveFileName variant returning the selected filter
+        def _getSaveFileName(*args, **kwargs):
+            return (QtGui.QFileDialog.getSaveFileName(*args, **kwargs), None)
     else:
         raise AssertionError(f"Unexpected QT_API: {QT_API}")
 
 
-if QT_API in [QT_API_PYQT6, QT_API_PYQT5, QT_API_PYSIDE6, QT_API_PYSIDE2]:
+if QT_API in [QT_API_PYQT6, QT_API_PYQT5, QT_API_PYSIDE6, QT_API_PYSIDE2, QT_API_PYTHONQT]:
     _setup_pyqt5plus()
 elif QT_API is None:  # See above re: dict.__getitem__.
     if _QT_FORCE_QT5_BINDING:
@@ -119,6 +143,7 @@ elif QT_API is None:  # See above re: dict.__getitem__.
             (_setup_pyqt5plus, QT_API_PYSIDE6),
             (_setup_pyqt5plus, QT_API_PYQT5),
             (_setup_pyqt5plus, QT_API_PYSIDE2),
+            (_setup_pyqt5plus, QT_API_PYTHONQT),
         ]
     for _setup, QT_API in _candidates:
         try:
diff --git a/lib/matplotlib/backends/qt_editor/_formlayout.py b/lib/matplotlib/backends/qt_editor/_formlayout.py
index fcf73ce..6ddc573 100644
--- a/lib/matplotlib/backends/qt_editor/_formlayout.py
+++ b/lib/matplotlib/backends/qt_editor/_formlayout.py
@@ -49,7 +49,7 @@ import logging
 from numbers import Integral, Real
 
 from matplotlib import _api, colors as mcolors
-from matplotlib.backends.qt_compat import _to_int, QtGui, QtWidgets, QtCore
+from matplotlib.backends.qt_compat import _to_int, QtGui, QtWidgets, QtCore, QT_API, _qt_property
 
 _log = logging.getLogger(__name__)
 
@@ -84,7 +84,7 @@ class ColorButton(QtWidgets.QPushButton):
         if color != self._color:
             self._color = color
             self.colorChanged.emit(self._color)
-            pixmap = QtGui.QPixmap(self.iconSize())
+            pixmap = QtGui.QPixmap(_qt_property(self.iconSize))
             pixmap.fill(color)
             self.setIcon(QtGui.QIcon(pixmap))
 
@@ -103,13 +103,16 @@ def to_qcolor(color):
     return qcolor
 
 
+def qcolor_to_hex(color):
+    return mcolors.to_hex((color.redF(), color.greenF(), color.blueF(), color.alphaF()), keep_alpha=True)
+
+
 class ColorLayout(QtWidgets.QHBoxLayout):
     """Color-specialized QLineEdit layout"""
     def __init__(self, color, parent=None):
         super().__init__()
         assert isinstance(color, QtGui.QColor)
-        self.lineedit = QtWidgets.QLineEdit(
-            mcolors.to_hex(color.getRgbF(), keep_alpha=True), parent)
+        self.lineedit = QtWidgets.QLineEdit(qcolor_to_hex(color), parent)
         self.lineedit.editingFinished.connect(self.update_color)
         self.addWidget(self.lineedit)
         self.colorbtn = ColorButton(parent)
@@ -123,10 +126,10 @@ class ColorLayout(QtWidgets.QHBoxLayout):
         self.colorbtn.color = qcolor
 
     def update_text(self, color):
-        self.lineedit.setText(mcolors.to_hex(color.getRgbF(), keep_alpha=True))
+        self.lineedit.setText(qcolor_to_hex(color))
 
     def text(self):
-        return self.lineedit.text()
+        return _qt_property(self.lineedit.text)
 
 
 def font_is_installed(font):
@@ -203,8 +206,9 @@ class FontLayout(QtWidgets.QGridLayout):
 
 
 def is_edit_valid(edit):
-    text = edit.text()
-    state = edit.validator().validate(text, 0)[0]
+    text = _qt_property(edit.text)
+    result = edit.validator().validate(text, 0)
+    state = result if QT_API == "PythonQt" else result[0]
     return state == QtGui.QDoubleValidator.State.Acceptable
 
 
@@ -326,9 +330,9 @@ class FormWidget(QtWidgets.QWidget):
             elif tuple_to_qfont(value) is not None:
                 value = field.get_font()
             elif isinstance(value, str) or mcolors.is_color_like(value):
-                value = str(field.text())
+                value = str(_qt_property(field.text))
             elif isinstance(value, (list, tuple)):
-                index = int(field.currentIndex())
+                index = int(_qt_property(field.currentIndex))
                 if isinstance(value[0], (list, tuple)):
                     value = value[index][0]
                 else:
@@ -336,9 +340,9 @@ class FormWidget(QtWidgets.QWidget):
             elif isinstance(value, bool):
                 value = field.isChecked()
             elif isinstance(value, Integral):
-                value = int(field.value())
+                value = int(_qt_property(field.value))
             elif isinstance(value, Real):
-                value = float(str(field.text()))
+                value = float(str(_qt_property(field.text)))
             elif isinstance(value, datetime.datetime):
                 datetime_ = field.dateTime()
                 if hasattr(datetime_, "toPyDateTime"):
@@ -352,7 +356,7 @@ class FormWidget(QtWidgets.QWidget):
                 else:
                     value = date_.toPython()
             else:
-                value = literal_eval(str(field.text()))
+                value = literal_eval(str(_qt_property(field.text)))
             valuelist.append(value)
         return valuelist
 
@@ -482,11 +486,11 @@ class FormDialog(QtWidgets.QDialog):
     def accept(self):
         self.data = self.formwidget.get()
         self.apply_callback(self.data)
-        super().accept()
+        QtWidgets.QDialog.accept(self)
 
     def reject(self):
         self.data = None
-        super().reject()
+        QtWidgets.QDialog.reject(self)
 
     def apply(self):
         self.apply_callback(self.formwidget.get())
