diff --git i/lib/matplotlib/backends/backend_qt4.py w/lib/matplotlib/backends/backend_qt4.py
index 8298ae3..2ac7c3f 100644
--- i/lib/matplotlib/backends/backend_qt4.py
+++ w/lib/matplotlib/backends/backend_qt4.py
@@ -25,6 +25,7 @@ from matplotlib.figure import Figure
 
 from matplotlib.widgets import SubplotTool
 try:
+    raise ImportError # TODO MEVIS: disabled figureoptions since they require some rework to make them work with PythonQt
     import matplotlib.backends.qt_editor.figureoptions as figureoptions
 except ImportError:
     figureoptions = None
diff --git i/lib/matplotlib/backends/backend_qt5.py w/lib/matplotlib/backends/backend_qt5.py
index 766f886..774a9ee 100644
--- i/lib/matplotlib/backends/backend_qt5.py
+++ w/lib/matplotlib/backends/backend_qt5.py
@@ -24,6 +24,7 @@ from matplotlib.figure import Figure
 
 from matplotlib.widgets import SubplotTool
 try:
+    raise ImportError # TODO MEVIS: disabled figureoptions since they require some rework to make them work with PythonQt
     import matplotlib.backends.qt_editor.figureoptions as figureoptions
 except ImportError:
     figureoptions = None
@@ -434,8 +435,16 @@ class FigureCanvasQT(QtWidgets.QWidget, FigureCanvasBase):
 class MainWindow(QtWidgets.QMainWindow):
     closing = QtCore.Signal()
 
+    def __init__(self):
+        QtGui.QMainWindow.__init__(self)
+        self._closeCallbacks = []
+
+    def connectClosing(self, callback):
+        self._closeCallbacks.append(callback)
+
     def closeEvent(self, event):
-        self.closing.emit()
+        for callback in self._closeCallbacks:
+            callback()
         QtWidgets.QMainWindow.closeEvent(self, event)
 
 
@@ -455,8 +464,9 @@ class FigureManagerQT(FigureManagerBase):
         FigureManagerBase.__init__(self, canvas, num)
         self.canvas = canvas
         self.window = MainWindow()
-        self.window.closing.connect(canvas.close_event)
-        self.window.closing.connect(self._widgetclosed)
+        self.window.setAttribute(QtCore.Qt.WA_DeleteOnClose)
+        self.window.connectClosing(canvas.close_event)
+        self.window.connectClosing(self._widgetclosed)
 
         self.window.setWindowTitle("Figure %d" % num)
         image = os.path.join(matplotlib.rcParams['datapath'],
@@ -478,15 +488,15 @@ class FigureManagerQT(FigureManagerBase):
         self.toolbar = self._get_toolbar(self.canvas, self.window)
         if self.toolbar is not None:
             self.window.addToolBar(self.toolbar)
-            self.toolbar.message.connect(self._show_message)
-            tbs_height = self.toolbar.sizeHint().height()
+            #self.toolbar.message.connect(self._show_message)
+            tbs_height = self.toolbar.sizeHint.height()
         else:
             tbs_height = 0
 
         # resize the main window so it will display the canvas with the
         # requested size:
         cs = canvas.sizeHint()
-        sbs = self.window.statusBar().sizeHint()
+        sbs = self.window.statusBar().sizeHint
         self._status_and_tool_height = tbs_height + sbs.height()
         height = cs.height() + self._status_and_tool_height
         self.window.resize(cs.width(), height)
@@ -502,7 +512,7 @@ class FigureManagerQT(FigureManagerBase):
                 self.toolbar.update()
         self.canvas.figure.add_axobserver(notify_axes_change)
 
-    @QtCore.Slot()
+    #@QtCore.Slot()
     def _show_message(self, s):
         # Fixes a PySide segfault.
         self.window.statusBar().showMessage(s)
@@ -557,7 +567,7 @@ class FigureManagerQT(FigureManagerBase):
         self.window.close()
 
     def get_window_title(self):
-        return str(self.window.windowTitle())
+        return str(self.window.windowTitle)
 
     def set_window_title(self, title):
         self.window.setWindowTitle(title)
@@ -569,7 +579,7 @@ class NavigationToolbar2QT(NavigationToolbar2, QtWidgets.QToolBar):
     def __init__(self, canvas, parent, coordinates=True):
         """ coordinates: should we show the coordinates on the right? """
         self.canvas = canvas
-        self.parent = parent
+        self._parent = parent
         self.coordinates = coordinates
         self._actions = {}
         """A mapping of toolitem method names to their QActions"""
@@ -644,7 +654,7 @@ class NavigationToolbar2QT(NavigationToolbar2, QtWidgets.QToolBar):
                                          ylabel=ylabel, label=label,
                                          axes_repr=repr(axes)))
                 item, ok = QtWidgets.QInputDialog.getItem(
-                    self.parent, 'Customize', 'Select axes:', titles, 0, False)
+                    self._parent, 'Customize', 'Select axes:', titles, 0, False)
                 if ok:
                     axes = allaxes[titles.index(six.text_type(item))]
                 else:
@@ -669,7 +679,8 @@ class NavigationToolbar2QT(NavigationToolbar2, QtWidgets.QToolBar):
         self.canvas.draw()
 
     def set_message(self, s):
-        self.message.emit(s)
+        # TODO MEVIS
+        #self.message.emit(s)
         if self.coordinates:
             self.locLabel.setText(s.replace(', ', '\n'))
 
@@ -692,7 +703,7 @@ class NavigationToolbar2QT(NavigationToolbar2, QtWidgets.QToolBar):
     def configure_subplots(self):
         image = os.path.join(matplotlib.rcParams['datapath'],
                              'images', 'matplotlib.png')
-        dia = SubplotToolQt(self.canvas.figure, self.parent)
+        dia = SubplotToolQt(self.canvas.figure, self._parent)
         dia.setWindowIcon(QtGui.QIcon(image))
         dia.exec_()
 
@@ -715,7 +726,7 @@ class NavigationToolbar2QT(NavigationToolbar2, QtWidgets.QToolBar):
             filters.append(filter)
         filters = ';;'.join(filters)
 
-        fname, filter = _getSaveFileName(self.parent,
+        fname, filter = _getSaveFileName(self._parent,
                                          "Choose a filename to save to",
                                  start, filters, selectedFilter)
         if fname:
@@ -739,7 +750,7 @@ class SubplotToolQt(SubplotTool, UiSubplotTool):
         UiSubplotTool.__init__(self, None)
 
         self.targetfig = targetfig
-        self.parent = parent
+        self._parent = parent
         self.donebutton.clicked.connect(self.close)
         self.resetbutton.clicked.connect(self.reset)
         self.tightlayout.clicked.connect(self.functight)
@@ -767,7 +778,7 @@ class SubplotToolQt(SubplotTool, UiSubplotTool):
             slider.setSliderPosition(int(self.defaults[attr] * 1000))
 
     def funcleft(self, val):
-        if val == self.sliderright.value():
+        if val == self.sliderright.value:
             val -= 1
         val /= 1000.
         self.targetfig.subplots_adjust(left=val)
@@ -776,7 +787,7 @@ class SubplotToolQt(SubplotTool, UiSubplotTool):
             self.targetfig.canvas.draw()
 
     def funcright(self, val):
-        if val == self.sliderleft.value():
+        if val == self.sliderleft.value:
             val += 1
         val /= 1000.
         self.targetfig.subplots_adjust(right=val)
@@ -785,7 +796,7 @@ class SubplotToolQt(SubplotTool, UiSubplotTool):
             self.targetfig.canvas.draw()
 
     def funcbottom(self, val):
-        if val == self.slidertop.value():
+        if val == self.slidertop.value:
             val -= 1
         val /= 1000.
         self.targetfig.subplots_adjust(bottom=val)
@@ -794,7 +805,7 @@ class SubplotToolQt(SubplotTool, UiSubplotTool):
             self.targetfig.canvas.draw()
 
     def functop(self, val):
-        if val == self.sliderbottom.value():
+        if val == self.sliderbottom.value:
             val += 1
         val /= 1000.
         self.targetfig.subplots_adjust(top=val)
diff --git i/lib/matplotlib/backends/qt_compat.py w/lib/matplotlib/backends/qt_compat.py
index e5983c4..9e35639 100644
--- i/lib/matplotlib/backends/qt_compat.py
+++ w/lib/matplotlib/backends/qt_compat.py
@@ -13,6 +13,7 @@ QT_API_PYQT = 'PyQt4'       # API is not set here; Python 2.x default is V 1
 QT_API_PYQTv2 = 'PyQt4v2'   # forced to Version 2 API
 QT_API_PYSIDE = 'PySide'    # only supports Version 2 API
 QT_API_PYQT5 = 'PyQt5'       # use PyQt5 API; Version 2 with module shim
+QT_API_PYTHONQT = 'PythonQt' # PythonQt, e.g. used in MeVisLab and 3D Slicer
 
 ETS = dict(pyqt=(QT_API_PYQTv2, 4), pyside=(QT_API_PYSIDE, 4),
            pyqt5=(QT_API_PYQT5, 5))
@@ -26,9 +27,11 @@ QT_API_ENV = os.environ.get('QT_API')
 
 if rcParams['backend'] == 'Qt5Agg':
     QT_RC_MAJOR_VERSION = 5
+    QT_RC_API = rcParams['backend.qt5']
 else:
     QT_RC_MAJOR_VERSION = 4
-
+    QT_RC_API = rcParams['backend.qt4']
+    
 QT_API = None
 
 if (QT_API_ENV is not None):
@@ -45,11 +48,8 @@ if (QT_API_ENV is not None):
 
 if QT_API is None:
     # No ETS environment or incompatible so use rcParams.
-    if rcParams['backend'] == 'Qt5Agg':
-        QT_API = rcParams['backend.qt5']
-    else:
-        QT_API = rcParams['backend.qt4']
-
+    QT_API = QT_RC_API
+        
 # We will define an appropriate wrapper for the differing versions
 # of file dialog.
 _getSaveFileName = None
@@ -63,8 +63,12 @@ if QT_API in (QT_API_PYQT, QT_API_PYQTv2, QT_API_PYQT5):
         import sip
         _sip_imported = True
     except ImportError:
-        # Try using PySide
-        QT_API = QT_API_PYSIDE
+        if QT_API == QT_RC_API:
+            # Try PySide as fallback
+            QT_API = QT_API_PYSIDE
+        else:
+            # Fall back from QT_API environment variable to rcParams:
+            QT_API = QT_RC_API
 
 if _sip_imported:
     if QT_API == QT_API_PYQTv2:
@@ -122,7 +126,7 @@ if _sip_imported:
     QtCore.Property = QtCore.pyqtProperty
     __version__ = QtCore.PYQT_VERSION_STR
 
-else:  # try importing pyside
+elif QT_API == QT_API_PYSIDE:  # try importing pyside
     from PySide import QtCore, QtGui, __version__, __version_info__
     if __version_info__ < (1, 0, 3):
         raise ImportError(
@@ -130,9 +134,20 @@ else:  # try importing pyside
 
     _getSaveFileName = QtGui.QFileDialog.getSaveFileName
 
+else: # can only be PythonQt
+    from PythonQt import QtCore, QtGui
+    __version__ = "2.0"
+    __version_info__ = "-"
+
+    QtCore.Signal = lambda *x: NotImplemented
+
+    # PythonQt does not yet support a getSaveFileName variant returning the selected filter
+    def _getSaveFileName(*args, **kwargs):
+        return (QtGui.QFileDialog.getSaveFileName(*args, **kwargs), None)
+
 
 # Apply shim to Qt4 APIs to make them look like Qt5
-if QT_API in (QT_API_PYQT, QT_API_PYQTv2, QT_API_PYSIDE):
+if QT_API in (QT_API_PYQT, QT_API_PYQTv2, QT_API_PYSIDE, QT_API_PYTHONQT):
     '''Import all used QtGui objects into QtWidgets
 
     Here I've opted to simple copy QtGui into QtWidgets as that
diff --git i/lib/matplotlib/backends/qt_editor/formlayout.py w/lib/matplotlib/backends/qt_editor/formlayout.py
index bc6d0a2..458ed14 100644
--- i/lib/matplotlib/backends/qt_editor/formlayout.py
+++ w/lib/matplotlib/backends/qt_editor/formlayout.py
@@ -88,16 +88,16 @@ class ColorButton(QtWidgets.QPushButton):
     def get_color(self):
         return self._color
 
-    @QtCore.Slot(QtGui.QColor)
+    #@QtCore.Slot(QtGui.QColor)
     def set_color(self, color):
         if color != self._color:
             self._color = color
-            self.colorChanged.emit(self._color)
+            #self.colorChanged.emit(self._color)
             pixmap = QtGui.QPixmap(self.iconSize())
             pixmap.fill(color)
             self.setIcon(QtGui.QIcon(pixmap))
 
-    color = QtCore.Property(QtGui.QColor, get_color, set_color)
+    #color = QtCore.Property(QtGui.QColor, get_color, set_color)
 
 def col2hex(color):
     """Convert matplotlib color to hex before passing to Qt"""
@@ -138,7 +138,7 @@ class ColorLayout(QtWidgets.QHBoxLayout):
         self.lineedit.setText(color.name())
 
     def text(self):
-        return self.lineedit.text()
+        return self.lineedit.text
 
 
 def font_is_installed(font):
@@ -151,6 +151,8 @@ def tuple_to_qfont(tup):
     """
     Create a QFont from tuple:
         (family [string], size [int], italic [bool], bold [bool])
+
+    TODO MEVIS: font_is_installed will currently not work due to missing QFontDatabase
     """
     if not isinstance(tup, tuple) or len(tup) != 4 \
        or not font_is_installed(tup[0]) \
@@ -215,7 +217,7 @@ class FontLayout(QtWidgets.QGridLayout):
 
 
 def is_edit_valid(edit):
-    text = edit.text()
+    text = edit.text
     state = edit.validator().validate(text, 0)[0]
 
     return state == QtGui.QDoubleValidator.Acceptable
@@ -323,9 +325,9 @@ class FormWidget(QtWidgets.QWidget):
             elif tuple_to_qfont(value) is not None:
                 value = field.get_font()
             elif isinstance(value, six.string_types) or is_color_like(value):
-                value = six.text_type(field.text())
+                value = six.text_type(field.text)
             elif isinstance(value, (list, tuple)):
-                index = int(field.currentIndex())
+                index = int(field.currentIndex)
                 if isinstance(value[0], (list, tuple)):
                     value = value[index][0]
                 else:
@@ -333,15 +335,15 @@ class FormWidget(QtWidgets.QWidget):
             elif isinstance(value, bool):
                 value = field.checkState() == QtCore.Qt.Checked
             elif isinstance(value, float):
-                value = float(str(field.text()))
+                value = float(str(field.text))
             elif isinstance(value, int):
-                value = int(field.value())
+                value = int(field.value)
             elif isinstance(value, datetime.datetime):
                 value = field.dateTime().toPyDateTime()
             elif isinstance(value, datetime.date):
                 value = field.date().toPyDate()
             else:
-                value = eval(str(field.text()))
+                value = eval(str(field.text))
             valuelist.append(value)
         return valuelist
 
