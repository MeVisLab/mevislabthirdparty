diff --git i/jedi/api/classes.py w/jedi/api/classes.py
index 3fb6fa4..6380d01 100644
--- i/jedi/api/classes.py
+++ w/jedi/api/classes.py
@@ -148,7 +148,14 @@ class BaseDefinition(object):
             stripped = stripped.parent
         if isinstance(stripped, pr.Name):
             stripped = stripped.parent
-        return type(stripped).__name__.lower().replace('wrapper', '')
+        typeString = type(stripped).__name__.lower().replace('wrapper', '')
+        if typeString == 'function':
+          # MEVIS: check if the function is a property, because MATE 
+          #        should not autocomplete braces on properties.
+          if isinstance(stripped, er.Function):
+            if stripped.is_property():
+              typeString = 'property'
+        return typeString
 
     def _path(self):
         """The module path."""
diff --git i/jedi/evaluate/__init__.py w/jedi/evaluate/__init__.py
index 944385c..429cb6f 100644
--- i/jedi/evaluate/__init__.py
+++ w/jedi/evaluate/__init__.py
@@ -245,7 +245,7 @@ class Evaluator(object):
 
         return self.follow_path(path, types, scope)
 
-    def follow_path(self, path, types, call_scope):
+    def follow_path(self, path, types, call_scope, parserParent=None):
         """
         Follows a path like::
 
@@ -257,7 +257,19 @@ class Evaluator(object):
         iter_paths = itertools.tee(path, len(types))
 
         for i, typ in enumerate(types):
-            fp = self._follow_path(iter_paths[i], typ, call_scope)
+            # MEVIS: emulate a call if the function is a property to allow resolving the 
+            #        property value.
+            if parserParent is not None and hasattr(typ, "var") and isinstance(typ.var, er.Function) and typ.var.is_property():
+                startPos = parserParent.start_pos
+                endPos = parserParent.end_pos
+                name = parserParent.parent
+                statement = name.parent
+                call = pr.Call(module=name._sub_module, name=name, start_pos=startPos, end_pos=endPos, parent=statement)
+                current = pr.Array(module=name._sub_module, start_pos=startPos, arr_type='tuple', parent=call)
+                result = self.execute(typ, current)
+                fp = self.follow_path(iter_paths[i], result, call_scope)
+            else:
+                fp = self._follow_path(iter_paths[i], typ, call_scope)
             if fp is not None:
                 results_new += fp
             else:
@@ -307,7 +319,7 @@ class Evaluator(object):
                     return []
             types = self.find_types(typ, current)
             result = imports.follow_imports(self, types)
-        return self.follow_path(path, result, scope)
+        return self.follow_path(path, result, scope, parserParent=current)
 
     @debug.increase_indent
     def execute(self, obj, params=(), evaluate_generator=False):
diff --git i/jedi/evaluate/representation.py w/jedi/evaluate/representation.py
index 985e5f3..ee7c92c 100644
--- i/jedi/evaluate/representation.py
+++ w/jedi/evaluate/representation.py
@@ -336,6 +336,10 @@ class Function(use_metaclass(CachedMetaClass, pr.IsScope)):
         self.base_func = func
         self.is_decorated = is_decorated
 
+    # MEVIS: add this for checking if the function is a property.
+    def is_property(self):
+      return self.base_func is not None and self.base_func.is_property()
+
     @memoize_default()
     def _decorated_func(self):
         """
diff --git i/jedi/parser/representation.py w/jedi/parser/representation.py
index b85f2fb..d00bc74 100644
--- i/jedi/parser/representation.py
+++ w/jedi/parser/representation.py
@@ -553,6 +553,16 @@ class Function(Scope):
             annotation.parent = self.use_as_parent
         self.annotation = annotation
 
+    # MEVIS: add this for checking if the function is a property.
+    def is_property(self):
+      for statement in self.decorators:
+        if len(statement._token_list) > 0:
+          firstToken = statement._token_list[0]
+          if len(firstToken.names) > 0:
+            if firstToken.names[0]._string == 'property':
+              return True
+      return False
+
     def get_code(self, first_indent=False, indention='    '):
         string = "\n".join('@' + stmt.get_code() for stmt in self.decorators)
         params = ', '.join([stmt.get_code(False) for stmt in self.params])
