import pathlib
import glob
import os
from conan import ConanFile
from conan.tools.cmake import CMake, CMakeDeps, CMakeToolchain, cmake_layout
from conan.tools.env import VirtualRunEnv
from conan.tools.files import collect_libs, copy, get, rmdir, replace_in_file, patch, chdir, rename
from conan.tools.scm import Version

required_conan_version = ">=2.2.2"


class ConanRecipe(ConanFile):
    name = "vtk"
    version = "9.3.1"
    homepage = "https://www.vtk.org"
    description = "The Visualization Toolkit (VTK) is open source software for manipulating and displaying scientific data"
    license = "MPL-2.0"
    package_type = "shared-library"
    settings = "os", "arch", "compiler", "build_type"
    exports_sources = "patches/*.patch", "CMakeLists.txt"

    mlab_hooks = {
        "dependencies.system_libs": [
            "libfreetype.so.6",
            "libXcursor.so.1",
            "libXfixes.so.3",
            "libXrender.so.1",
        ]
    }

    def layout(self):
        cmake_layout(self, src_folder="src")

    def requirements(self):
        self.requires("boost/[>=1.74.0]")
        self.requires("double-conversion/[>=3.1.5]")
        self.requires("eigen/[>=3.3.9]")
        self.requires("glew/[>=2.2.0]")
        self.requires("hdf5/[>=1.14.2]")
        self.requires("libjpeg-turbo/[>=2.1.0]")
        self.requires("libpng/[>=1.6.37]")
        self.requires("libxml2/[>=2.9.12]")
        self.requires("lz4/[>=1.9.3]")
        self.requires("python/[>=3.6.4]")
        self.requires("qtbase/[>=6.5]")
        self.requires("qtdeclarative/[>=6.5]")
        self.requires("sqlite3/[>=3.36.0]")
        self.requires("tiff/[>=4.3.0]")
        self.requires("xz-utils/[>=5.2.6]")
        self.requires("zlib/[>=1.2.12]")

        if self.settings.os != "Linux":
            self.requires("freetype/[>=2.10.4]")

    def source(self):
        major_minor = ".".join(str(self.version).split(".")[0:2])
        get(
            self,
            sha256="8354ec084ea0d2dc3d23dbe4243823c4bfc270382d0ce8d658939fd50061cab8",
            url=f"https://www.vtk.org/files/release/{major_minor}/VTK-{self.version}.tar.gz",
            strip_root=True,
        )
        patch(
            self,
            patch_file="patches/001-fix_windows_debug_build.patch",
            patch_type="bugfix",
            patch_description="fix debug build linker issue on MSVC",
            patch_source="https://gitlab.kitware.com/vtk/vtk/-/issues/19166",
        )
        patch(
            self,
            patch_file="patches/002-make_depth_buffer_configurable.patch",
            patch_type="enhancement",
            patch_description="""make generated FramebufferObject depth buffer size configurable
for compatibility with the render buffer generated by Qt/MeVisLab
Issue submitted: https://gitlab.kitware.com/vtk/vtk/-/issues/19255""",
        )
        patch(
            self,
            patch_file="patches/003-allow_to_blit_back_depth.patch",
            patch_type="enhancement",
            patch_description="""add facility to blit back the depth buffer to external framebuffer
Issue submitted: https://gitlab.kitware.com/vtk/vtk/-/issues/19256""",
        )

        # glew is not detected as a shared library in `vtk_detect_library_shared`, as
        # conan marks in as an interface library, so we ignore the result of the call and set it to shared
        # manually. The same happens with all other libraries, though the result of the check seems only
        # to be used in glew under Windows
        replace_in_file(
            self,
            os.path.join(self.source_folder, "ThirdParty", "glew", "CMakeLists.txt"),
            'set(VTK_GLEW_SHARED "${vtkglew_is_shared}")',
            "set(VTK_GLEW_SHARED 1)",
        )

    def generate(self):
        # run environment is needed to be able to run sqlite and other executables during build
        env = VirtualRunEnv(self)
        env.generate(scope="build")

        cd = CMakeDeps(self)
        cd.generate()

        tc = CMakeToolchain(self)
        tc.variables["CMAKE_DEBUG_POSTFIX"] = "_d" if self.settings.build_type == "Debug" else ""
        tc.variables["VTK_WINDOWS_PYTHON_DEBUGGABLE"] = self.settings.build_type == "Debug"
        tc.variables["BUILD_SHARED_LIBS"] = True
        tc.variables["CMAKE_INSTALL_RPATH"] = "$ORIGIN;$ORIGIN/../lib"
        tc.variables["BUILD_TESTING"] = False
        tc.variables["VTK_ENABLE_REMOTE_MODULES"] = False
        tc.variables["VTK_FORBID_DOWNLOADS"] = True
        tc.variables["VTK_USE_FUTURE_BOOL"] = True
        tc.variables["CMAKE_CXX_STANDARD"] = 17
        tc.variables["VTK_IGNORE_CMAKE_CXX11_CHECKS"] = True

        python_dependency = self.dependencies["python"]
        py_version = python_dependency.ref.version
        tc.variables["Python_ADDITIONAL_VERSIONS"] = f"{py_version.major}.{py_version.minor}"
        tc.variables["PythonInterp_ROOT"] = python_dependency.package_folder.replace("\\", "/")

        if self.settings.os == "Windows":
            build_suffix = "_d" if self.settings.build_type == "Debug" else ""
            tc.variables["PYTHON_LIBRARY"] = (
                python_dependency.cpp_info.libdirs[0].replace("\\", "/") + f"/python{py_version.major}{py_version.minor}{build_suffix}.lib"
            )
            tc.variables["PYTHON_INCLUDE_DIR"] = python_dependency.cpp_info.includedirs[0].replace("\\", "/")
            tc.variables["VTK_PYTHON_SITE_PACKAGES_SUFFIX"] = "Lib/site-packages"
            tc.variables["PYTHON_EXECUTABLE"] = python_dependency.package_folder.replace("\\", "/") + f"/python3{build_suffix}.exe"
        else:
            tc.variables["PYTHON_EXECUTABLE"] = python_dependency.package_folder + "/bin/python3"

        tc.variables["USE_COMPILER_HIDDEN_VISIBILITY"] = True
        tc.variables["VTK_QT_VERSION"] = 6
        tc.variables["VTK_DISPATCH_AOS_ARRAYS"] = True

        tc.variables["VTK_GROUP_ENABLE_Imaging"] = "YES"
        tc.variables["VTK_GROUP_ENABLE_Qt"] = "YES"
        tc.variables["VTK_GROUP_ENABLE_Rendering"] = "YES"
        tc.variables["VTK_GROUP_ENABLE_StandAlone"] = "YES"
        tc.variables["VTK_GROUP_ENABLE_Views"] = "YES"

        tc.variables["VTK_WRAP_PYTHON"] = True
        tc.variables["VTK_WRAP_JAVA"] = False
        tc.variables["VTK_WRAP_TCL"] = False
        tc.variables["VTK_USE_TK"] = False

        tc.variables["VTK_MODULE_USE_EXTERNAL_VTK_eigen"] = True
        tc.variables["VTK_MODULE_USE_EXTERNAL_VTK_hdf5"] = True
        tc.variables["VTK_MODULE_USE_EXTERNAL_VTK_freetype"] = True
        tc.variables["VTK_MODULE_USE_EXTERNAL_VTK_glew"] = True
        tc.variables["VTK_MODULE_USE_EXTERNAL_VTK_libxml2"] = True
        tc.variables["VTK_MODULE_USE_EXTERNAL_VTK_lzma"] = True
        tc.variables["VTK_MODULE_USE_EXTERNAL_VTK_jpeg"] = True
        tc.variables["VTK_MODULE_USE_EXTERNAL_VTK_png"] = True
        tc.variables["VTK_MODULE_USE_EXTERNAL_VTK_tiff"] = True
        tc.variables["VTK_MODULE_USE_EXTERNAL_VTK_sqlite"] = True

        tc.variables["VTK_MODULE_ENABLE_VTK_Addon"] = "NO"
        tc.variables["VTK_MODULE_ENABLE_VTK_DICOM"] = "NO"
        tc.variables["VTK_MODULE_ENABLE_VTK_Libproj"] = "NO"
        tc.variables["VTK_MODULE_ENABLE_VTK_FiltersReebGraph"] = "YES"
        tc.variables["VTK_MODULE_ENABLE_VTK_Glew"] = "NO"
        tc.variables["VTK_MODULE_ENABLE_VTK_GUISupportQt"] = "YES"
        tc.variables["VTK_MODULE_ENABLE_VTK_GUISupportQtQuick"] = "YES"
        tc.variables["VTK_MODULE_ENABLE_VTK_GUISupportQtOpenGL"] = "YES"
        tc.variables["VTK_MODULE_ENABLE_VTK_GUISupportQtWebkit"] = "NO"
        tc.variables["VTK_MODULE_ENABLE_VTK_InfovisBoost"] = "YES"
        tc.variables["VTK_MODULE_ENABLE_VTK_InfovisBoostGraphAlgorithms"] = "YES"
        tc.variables["VTK_MODULE_ENABLE_VTK_IOExportOpenGL2"] = "YES"
        tc.variables["VTK_MODULE_ENABLE_VTK_IOGeoJSON"] = "YES"
        tc.variables["VTK_MODULE_ENABLE_VTK_IOVPIC"] = "YES"
        tc.variables["VTK_MODULE_ENABLE_VTK_IOIOSS"] = "NO"  # only needed for tests, compiler error with msbuild 17.6/17.7
        tc.variables["VTK_MODULE_ENABLE_VTK_ParseOGLExt"] = "YES"
        tc.variables["VTK_MODULE_ENABLE_VTK_Python"] = "YES"
        tc.variables["VTK_MODULE_ENABLE_VTK_RenderingExternal"] = "YES"
        tc.variables["VTK_MODULE_ENABLE_VTK_RenderingQt"] = "YES"
        tc.variables["VTK_MODULE_ENABLE_VTK_RenderingSceneGraph"] = "YES"
        tc.variables["VTK_MODULE_ENABLE_VTK_VPIC"] = "YES"
        tc.variables["VTK_MODULE_ENABLE_VTK_ViewsGeovis"] = "YES"
        tc.variables["VTK_MODULE_ENABLE_VTK_ViewsQt"] = "YES"
        tc.variables["VTK_MODULE_ENABLE_VTK_WrappingTools"] = "YES"

        sqlite_info = self.dependencies["sqlite3"].cpp_info
        tc.variables["SQLITE3_INCLUDE_DIR"] = ";".join([d.replace("\\", "/") for d in sqlite_info.includedirs])
        tc.variables["SQLite3_INCLUDE_DIR"] = tc.variables["SQLITE3_INCLUDE_DIR"]
        sqlite_libdir = sqlite_info.libdirs[-1].replace("\\", "/")
        sqlite_lib = f"{sqlite_info.libs[0]}.lib" if self.settings.os == "Windows" else f"lib{sqlite_info.libs[0]}.so"
        tc.variables["SQLITE3_LIBRARY"] = f"{sqlite_libdir}/{sqlite_lib}"
        tc.variables["SQLite3_LIBRARIES"] = tc.variables["SQLITE3_LIBRARY"]
        tc.variables["ZLIB_USE_EXTERNAL"] = True
        tc.variables["HDF5_IS_PARALLEL"] = False
        # make sure libGL is preferred to libOpenGL
        tc.variables["OpenGL_GL_PREFERENCE"] = "LEGACY"

        tc.generate()

    def build(self):
        cmake = CMake(self)
        cmake.configure(build_script_folder=os.path.join(self.source_folder, ".."))
        cmake.build()

    def package(self):
        copy(self, "Copyright.txt", src=self.source_folder, dst=os.path.join(self.package_folder, "licenses"))
        cmake = CMake(self)
        cmake.install()

        if self.settings.build_type == "Debug":
            # remove one "_d" too many: (FIXME!)
            if self.settings.os == "Windows":
                with chdir(self, os.path.join(self.package_folder, "Lib/site-packages/vtkmodules")):
                    for entry in glob.glob("*_d_d.pyd"):
                        rename(self, entry, entry[:-8] + "_d.pyd")
            if self.settings.os == "Linux":
                python_dependency = self.dependencies["python"]
                py_version = python_dependency.ref.version
                py_version_str = f"{py_version.major}.{py_version.minor}"
                with chdir(self, os.path.join(self.package_folder, f"lib/python{py_version_str}/site-packages/vtkmodules")):
                    for entry in glob.glob("*_d.so"):
                        rename(self, entry, entry[:-5] + ".so")

        if self.settings.os == "Windows":
            for dll in pathlib.Path(os.path.join(self.package_folder, "bin")).glob("*.dll"):
                copy(self, f"*/{dll.stem}.pdb", src=self.build_folder, dst=os.path.join(self.package_folder, "bin"), keep_path=False)
            for exe in pathlib.Path(os.path.join(self.package_folder, "bin")).glob("*.exe"):
                copy(self, f"*/{exe.stem}.pdb", src=self.build_folder, dst=os.path.join(self.package_folder, "bin"), keep_path=False)

        rmdir(self, os.path.join(self.package_folder, "cmake"))
        rmdir(self, os.path.join(self.package_folder, "share"))
        rmdir(self, os.path.join(self.package_folder, "lib", "cmake"))
        for pycache_path in pathlib.Path(os.path.join(self.package_folder, "lib")).rglob("__pycache__"):
            rmdir(self, pycache_path)

    def package_info(self):
        self.cpp_info.set_property("cpe", "cpe:2.3:a:vtk:vtk:*:*:*:*:*:*:*:*")
        self.cpp_info.set_property("base_purl", "github/Kitware/VTK")  # Official mirror
        self.cpp_info.set_property("cmake_file_name", "VTK")
        self.cpp_info.set_property("cmake_target_name", "VTK::VTK")
        self.cpp_info.set_property("pkg_config_name", "VTK")

        v = Version(self.version)
        self.cpp_info.includedirs = ["include", f"include/vtk-{v.major}.{v.minor}"]
        self.cpp_info.defines.append("VTK_RENDERING_BACKEND_OPENGL" if self.settings.os == "Macos" else "VTK_RENDERING_BACKEND_OPENGL2")
        # Remove all libs not prefixed with 'vtk' and not containing 'PythonXY'
        py_version = self.dependencies["python"].ref.version
        python_filter = f"Python{py_version.major}{py_version.minor}D"
        self.cpp_info.libs = list(filter(lambda x: python_filter not in x, collect_libs(self)))
