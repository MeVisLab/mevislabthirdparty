diff --git i/Rendering/External/vtkExternalOpenGLRenderer.cxx w/Rendering/External/vtkExternalOpenGLRenderer.cxx
index 220a4dba..63bf58ff 100644
--- i/Rendering/External/vtkExternalOpenGLRenderer.cxx
+++ w/Rendering/External/vtkExternalOpenGLRenderer.cxx
@@ -92,8 +92,6 @@ void vtkExternalOpenGLRenderer::Render(void)
   matrix->MultiplyPoint(focalPoint, newFocalPoint);
   camera->SetFocalPoint(newFocalPoint);
 
-  matrix->Delete();
-
   // Lights
   // Query lights existing in the external context
   // and tweak them based on vtkExternalLight objects added by the user
@@ -132,7 +130,7 @@ void vtkExternalOpenGLRenderer::Render(void)
         // Create a new light only if one is present in the external context
         light = vtkLight::New();
         // Headlight because VTK will apply transform matrices
-        light->SetLightTypeToHeadlight();
+        light->SetLightTypeToSceneLight();
         light_created = true;
       }
       else
@@ -240,7 +238,10 @@ void vtkExternalOpenGLRenderer::Render(void)
           }
           else
           {
-            light->SetPosition(-info[0], -info[1], -info[2]);
+              double position[4] = {info[0], info[1], info[2], 0 }, newPosition[4];
+              matrix->MultiplyPoint(position, newPosition);
+
+              light->SetPosition(newPosition[0], newPosition[1], newPosition[2]);
           }
         }
       }
@@ -252,7 +253,10 @@ void vtkExternalOpenGLRenderer::Render(void)
         }
         else
         {
-          light->SetPosition(info[0], info[1], info[2]);
+          double position[4] = { info[0], info[1], info[2], 1. }, newPosition[4];
+          matrix->MultiplyPoint(position, newPosition);
+
+          light->SetPosition(newPosition[0], newPosition[1], newPosition[2]);
         }
 
         // Attenuation
@@ -300,11 +304,14 @@ void vtkExternalOpenGLRenderer::Render(void)
           else
           {
             glGetLightfv(curLight, GL_SPOT_DIRECTION, info);
+            double position[4] = { info[0], info[1], info[2], 0. }, newPosition[4];
+            matrix->MultiplyPoint(position, newPosition);
             for (unsigned int i = 0; i < 3; ++i)
             {
               info[i] += light->GetPosition()[i];
             }
-            light->SetFocalPoint(info[0], info[1], info[2]);
+
+            light->SetFocalPoint(newPosition[0], newPosition[1], newPosition[2]);
           }
         }
       }
@@ -318,6 +325,8 @@ void vtkExternalOpenGLRenderer::Render(void)
     }
   }
 
+  matrix->Delete();
+
   // Forward the call to the Superclass
   this->Superclass::Render();
 }
