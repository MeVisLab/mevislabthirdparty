diff --git a/include/vigra/error.hxx b/include/vigra/error.hxx
index 881bc46..2cbbeb6 100644
--- a/include/vigra/error.hxx
+++ b/include/vigra/error.hxx
@@ -140,7 +140,7 @@ class ContractViolation : public StdException
         (*this) << "\n" << prefix << "\n" << message << "\n";
     }
     
-    ~ContractViolation() throw()
+    ~ContractViolation()
     {}
     
     template<class T>
@@ -152,7 +152,7 @@ class ContractViolation : public StdException
         return *this;
     }
 
-    virtual const char * what() const throw()
+    virtual const char * what() const noexcept
     {
         try
         {
diff --git a/include/vigra/fftw3.hxx b/include/vigra/fftw3.hxx
index 1f216ce..03d3e29 100644
--- a/include/vigra/fftw3.hxx
+++ b/include/vigra/fftw3.hxx
@@ -689,11 +689,11 @@ class FFTWAllocator
         typedef FFTWAllocator<Other> other;
     };
     
-    FFTWAllocator() throw()
+    FFTWAllocator() noexcept
     {}
     
     template<class Other>
-    FFTWAllocator(const FFTWAllocator<Other>& /*right*/) throw()
+    FFTWAllocator(const FFTWAllocator<Other>& /*right*/) noexcept
     {}
     
     template<class Other>
@@ -723,7 +723,7 @@ class FFTWAllocator
         ptr->~Ty();
     }
     
-    size_type max_size() const throw()
+    size_type max_size() const noexcept
     {
         return NumericTraits<std::ptrdiff_t>::max() / sizeof(Ty);
     }
@@ -757,11 +757,11 @@ class allocator<vigra::FFTWComplex<Real> >
         typedef allocator<Other> other;
     };
     
-    allocator() throw()
+    allocator() noexcept
     {}
     
     template<class Other>
-    allocator(const allocator<Other>& /*right*/) throw()
+    allocator(const allocator<Other>& /*right*/) noexcept
     {}
     
     template<class Other>
@@ -791,7 +791,7 @@ class allocator<vigra::FFTWComplex<Real> >
         ptr->~value_type();
     }
     
-    size_type max_size() const throw()
+    size_type max_size() const noexcept
     {
         return vigra::NumericTraits<std::ptrdiff_t>::max() / sizeof(value_type);
     }
diff --git a/include/vigra/functortraits.hxx b/include/vigra/functortraits.hxx
index 60ceb7a..d183fb0 100644
--- a/include/vigra/functortraits.hxx
+++ b/include/vigra/functortraits.hxx
@@ -190,11 +190,9 @@ VIGRA_DEFINE_STL_FUNCTOR(std::greater_equal, VigraFalseType, VigraTrueType)
 VIGRA_DEFINE_STL_FUNCTOR(std::less_equal, VigraFalseType, VigraTrueType)
 VIGRA_DEFINE_STL_FUNCTOR(std::logical_and, VigraFalseType, VigraTrueType)
 VIGRA_DEFINE_STL_FUNCTOR(std::logical_or, VigraFalseType, VigraTrueType)
-VIGRA_DEFINE_STL_FUNCTOR(std::binary_negate, VigraFalseType, VigraTrueType)
 
 VIGRA_DEFINE_STL_FUNCTOR(std::negate, VigraTrueType, VigraFalseType)
 VIGRA_DEFINE_STL_FUNCTOR(std::logical_not, VigraTrueType, VigraFalseType)
-VIGRA_DEFINE_STL_FUNCTOR(std::unary_negate, VigraTrueType, VigraFalseType)
 #undef VIGRA_DEFINE_STL_FUNCTOR
 
 template <class R>
diff --git a/include/vigra/mathutil.hxx b/include/vigra/mathutil.hxx
index f370f45..efa7ecd 100644
--- a/include/vigra/mathutil.hxx
+++ b/include/vigra/mathutil.hxx
@@ -1748,6 +1748,11 @@ inline bool greaterEqualAtTolerance(T1 l, T2 r)
 #pragma GCC diagnostic ignored "-Wtype-limits"
 #endif
 
+#ifdef _MSC_VER
+#pragma warning( push )
+#pragma warning(disable : 4296)
+#endif
+
 VIGRA_MATH_FUNC_HELPER(unsigned char)
 VIGRA_MATH_FUNC_HELPER(unsigned short)
 VIGRA_MATH_FUNC_HELPER(unsigned int)
@@ -1762,6 +1767,10 @@ VIGRA_MATH_FUNC_HELPER(float)
 VIGRA_MATH_FUNC_HELPER(double)
 VIGRA_MATH_FUNC_HELPER(long double)
 
+#ifdef _MSC_VER
+#pragma warning( pop )
+#endif
+
 #ifdef __GNUC__
 #pragma GCC diagnostic pop
 #endif
diff --git a/include/vigra/multi_handle.hxx b/include/vigra/multi_handle.hxx
index f291a9c..d4d9674 100644
--- a/include/vigra/multi_handle.hxx
+++ b/include/vigra/multi_handle.hxx
@@ -45,7 +45,7 @@ namespace vigra {
 template <unsigned TARGET_INDEX, class Handle, unsigned int INDEX=Handle::index>
 struct CoupledHandleCast;
 
-#ifndef _MSC_VER  // Visual Studio doesn't like these forward declarations
+#if !defined(_MSC_VER)  || (_MSC_VER >=  1916) // Older (pre VS 2017.9) Visual Studio doesn't like these forward declarations
 template <unsigned int TARGET_INDEX, class Handle>
 typename CoupledHandleCast<TARGET_INDEX, Handle>::reference
 get(Handle & handle);
diff --git a/include/vigra/random_forest/rf_algorithm.hxx b/include/vigra/random_forest/rf_algorithm.hxx
index 850859f..f40dad0 100644
--- a/include/vigra/random_forest/rf_algorithm.hxx
+++ b/include/vigra/random_forest/rf_algorithm.hxx
@@ -1151,7 +1151,11 @@ class ClusterImportanceVisitor : public visitors::VisitorBase
             ArrayVector<Int32> indices(pr.features().shape(0));
             for(int ii = 0; ii < pr.features().shape(0); ++ii)
                indices.push_back(ii); 
-            std::random_shuffle(indices.begin(), indices.end());
+
+            std::random_device rd;
+            std::mt19937 g(rd());
+
+            std::shuffle(indices.begin(), indices.end(), g);
             for(int ii = 0; ii < rf.ext_param_.row_count_; ++ii)
             {
                 if(!sm.is_used()[indices[ii]] && cts[pr.response()(indices[ii], 0)] < 3000)
diff --git a/include/vigra/random_forest/rf_visitors.hxx b/include/vigra/random_forest/rf_visitors.hxx
index 92e028e..3fe5970 100755
--- a/include/vigra/random_forest/rf_visitors.hxx
+++ b/include/vigra/random_forest/rf_visitors.hxx
@@ -39,8 +39,10 @@
 # include "vigra/hdf5impex.hxx"
 #endif // HasHDF5
 #include <vigra/windows.h>
+#include <algorithm>
 #include <iostream>
 #include <iomanip>
+#include <random>
 
 #include <vigra/metaprogramming.hxx>
 #include <vigra/multi_pointoperators.hxx>
@@ -920,7 +922,11 @@ class OOB_Error : public VisitorBase
         {
             ArrayVector<int> oob_indices;
             ArrayVector<int> cts(class_count, 0);
-            std::random_shuffle(indices.begin(), indices.end());
+
+            std::random_device rd;
+            std::mt19937 g(rd());
+
+            std::shuffle(indices.begin(), indices.end(), g);
             for(int ii = 0; ii < rf.ext_param_.row_count_; ++ii)
             {
                 if(!sm.is_used()[indices[ii]] && cts[pr.response()(indices[ii], 0)] < 40000)
diff --git a/include/vigra/unittest.hxx b/include/vigra/unittest.hxx
index df2294c..f94d7e8 100755
--- a/include/vigra/unittest.hxx
+++ b/include/vigra/unittest.hxx
@@ -442,11 +442,11 @@ struct unit_test_failed
     : what_(message)
     {}
 
-    virtual ~unit_test_failed() throw()
+    virtual ~unit_test_failed()
     {
     }
 
-    virtual const char * what() const throw()
+    virtual const char * what() noexcept const 
     {
         return what_.c_str();
     }
diff --git a/src/impex/imageinfo.cxx b/src/impex/imageinfo.cxx
index 2420347..482f27a 100644
--- a/src/impex/imageinfo.cxx
+++ b/src/impex/imageinfo.cxx
@@ -1015,8 +1015,8 @@ VolumeImportInfo::VolumeImportInfo(const std::string &filename)
 
             do
             {
-                numEndIt = std::find_if(numBeginIt, filename.rend(),(int (*)(int)) &isdigit);
-                numBeginIt = std::find_if(numEndIt, filename.rend(), not1(std::ptr_fun((int (*)(int))&isdigit)));
+                numEndIt = std::find_if(numBeginIt, filename.rend(), [](const auto &x) { return isdigit(x); });
+                numBeginIt = std::find_if(numEndIt, filename.rend(), [](const auto &x) { return !isdigit(x); });
 
                 if(numEndIt != filename.rend())
                 {
diff --git a/src/impex/tiff.cxx b/src/impex/tiff.cxx
index d85c8d5..30a96e8 100644
--- a/src/impex/tiff.cxx
+++ b/src/impex/tiff.cxx
@@ -64,6 +64,7 @@
 #include <iostream>
 #include <iomanip>
 #include <sstream>
+#include <cstdint>
 
 extern "C"
 {
@@ -187,9 +188,9 @@ namespace vigra {
         tdata_t * stripbuffer;
         tstrip_t strip;
 
-        uint32 stripindex, stripheight;
-        uint32 width, height;
-        uint16 samples_per_pixel, bits_per_sample,
+        std::uint32_t stripindex, stripheight;
+        std::uint32_t width, height;
+        std::uint16_t samples_per_pixel, bits_per_sample,
             photometric, planarconfig, fillorder, extra_samples_per_pixel;
         float x_resolution, y_resolution;
         Diff2D position;
@@ -276,7 +277,7 @@ namespace vigra {
 
     std::string TIFFDecoderImpl::get_pixeltype_by_sampleformat() const
     {
-        uint16 sampleformat;
+        std::uint16_t sampleformat;
 
         if ( TIFFGetField( tiff, TIFFTAG_SAMPLEFORMAT, &sampleformat ) ) {
 
@@ -320,7 +321,7 @@ namespace vigra {
 
     std::string TIFFDecoderImpl::get_pixeltype_by_datatype() const
     {
-        uint16 datatype;
+        std::uint16_t datatype;
 
         if ( TIFFGetField( tiff, TIFFTAG_DATATYPE, &datatype ) ) {
             // dangelo: correct parsing of INT/UINT (given in tiff.h)
@@ -361,7 +362,7 @@ namespace vigra {
         TIFFGetField( tiff, TIFFTAG_IMAGELENGTH, &height );
 
         // check for tiled TIFFs
-        uint32 tileWidth, tileHeight;
+        std::uint32_t tileWidth, tileHeight;
         if( TIFFGetField( tiff, TIFFTAG_TILEWIDTH, &tileWidth ) &&
             TIFFGetField( tiff, TIFFTAG_TILELENGTH, &tileHeight ) )
             vigra_precondition( (tileWidth == width) && (tileHeight == height),
@@ -380,7 +381,7 @@ namespace vigra {
                         " A suitable default was not found." );
 
         // read extra samples (# of alpha channels)
-        uint16 *extra_sample_types=0;
+        std::uint16_t *extra_sample_types=0;
         if (TIFFGetField( tiff, TIFFTAG_EXTRASAMPLES,
                           &extra_samples_per_pixel, &extra_sample_types )!=1)
         {
@@ -450,7 +451,7 @@ namespace vigra {
             case PHOTOMETRIC_LOGL:
             case PHOTOMETRIC_LOGLUV:
             {
-                uint16 tiffcomp;
+                std::uint16_t tiffcomp;
                 TIFFGetFieldDefaulted( tiff, TIFFTAG_COMPRESSION, &tiffcomp );
                 if (tiffcomp != COMPRESSION_SGILOG && tiffcomp != COMPRESSION_SGILOG24)
                     vigra_fail("TIFFDecoder:"
@@ -532,8 +533,8 @@ namespace vigra {
         }
 
         // other fields
-        uint16 u16value;
-        uint32 u32value;
+        std::uint16_t u16value;
+        std::uint32_t u32value;
         float unitLength = 1.0f;
         if (TIFFGetField( tiff, TIFFTAG_RESOLUTIONUNIT, &u16value )) {
             switch (u16value) {
@@ -579,7 +580,7 @@ namespace vigra {
             canvasSize.y = u32value;
         }
 
-        if ((uint32)canvasSize.x < position.x + width || (uint32)canvasSize.y < position.y + height)
+        if ((std::uint32_t)canvasSize.x < position.x + width || (std::uint32_t)canvasSize.y < position.y + height)
         {
             canvasSize.x = canvasSize.y = 0;
         }
@@ -956,7 +957,7 @@ namespace vigra {
         TIFFSetField( tiff, TIFFTAG_BITSPERSAMPLE, bits_per_sample );
 
        if (extra_samples_per_pixel > 0) {
-              uint16 * types = new  uint16[extra_samples_per_pixel];
+           std::uint16_t * types = new  std::uint16_t[extra_samples_per_pixel];
            for ( int i=0; i < extra_samples_per_pixel; i++ ) {
               types[i] = EXTRASAMPLE_UNASSALPHA;
             }
@@ -990,8 +991,8 @@ namespace vigra {
             TIFFSetField( tiff, TIFFTAG_YPOSITION, position.y / y_resolution);
         }
 
-        if ((uint32)canvasSize.x >= position.x + width
-            && (uint32)canvasSize.y >= position.y + height)
+        if ((std::uint32_t)canvasSize.x >= position.x + width
+            && (std::uint32_t)canvasSize.y >= position.y + height)
         {
             TIFFSetField( tiff, TIFFTAG_PIXAR_IMAGEFULLWIDTH, canvasSize.x);
             TIFFSetField( tiff, TIFFTAG_PIXAR_IMAGEFULLLENGTH, canvasSize.y);
