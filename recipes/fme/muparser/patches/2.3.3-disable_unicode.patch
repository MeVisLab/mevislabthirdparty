diff --git i/include/muParserDLL.h w/include/muParserDLL.h
index 00eea9f..f57f1fb 100644
--- i/include/muParserDLL.h
+++ w/include/muParserDLL.h
@@ -43,7 +43,7 @@ extern "C"
 	// Basic types
 	typedef void* muParserHandle_t;    // parser handle
 
-#ifndef _UNICODE
+#if 1
 	typedef char   muChar_t;            // character type
 #else
 	typedef wchar_t   muChar_t;            // character type
diff --git i/include/muParserDef.h w/include/muParserDef.h
index 13a15c8..2662dc5 100644
--- i/include/muParserDef.h
+++ w/include/muParserDef.h
@@ -57,7 +57,7 @@
 */
 //#define MUP_USE_OPENMP
 
-#if defined(_UNICODE)
+#if 0
 	/** \brief Definition of the basic parser string type. */
 	#define MUP_STRING_TYPE std::wstring
 
@@ -86,13 +86,13 @@
 
 #if defined(_MSC_VER)
 	#pragma warning(push)
-	#pragma warning(disable : 26812) 
+	#pragma warning(disable : 26812)
 #endif
 
 
 namespace mu
 {
-#if defined(_UNICODE)
+#if 0
 
 	/** \brief Encapsulate wcout. */
 	inline std::wostream& console()
diff --git i/samples/example2/example2.c w/samples/example2/example2.c
index 42e4564..74c157e 100644
--- i/samples/example2/example2.c
+++ w/samples/example2/example2.c
@@ -39,7 +39,7 @@
 #define PARSER_CONST_E   2.718281828459045235360287
 #define PARSER_MAXVARS		10
 
-#ifndef _UNICODE
+#if 1
 	#define _T(x) x
 	#define myprintf printf
 	#define mystrlen strlen
diff --git i/src/muParserBase.cpp w/src/muParserBase.cpp
index a28a7fc..b4ca15e 100644
--- i/src/muParserBase.cpp
+++ w/src/muParserBase.cpp
@@ -298,10 +298,10 @@ namespace mu
 			ss << _T("; RELEASE");
 #endif
 
-#ifdef _UNICODE
+#if 0
 			ss << _T("; UNICODE");
 #else
-#ifdef _MBCS
+#if 0
 			ss << _T("; MBCS");
 #else
 			ss << _T("; ASCII");
diff --git i/src/muParserDLL.cpp w/src/muParserDLL.cpp
index 846f65e..61c4130 100644
--- i/src/muParserDLL.cpp
+++ w/src/muParserDLL.cpp
@@ -26,7 +26,7 @@
 	OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
 
-#if defined(MUPARSER_DLL) 
+#if defined(MUPARSER_DLL)
 
 #if defined(_WIN32)
 	#define WIN32_LEAN_AND_MEAN
@@ -43,13 +43,13 @@
 #include "muParserInt.h"
 #include "muParserError.h"
 
-#if _UNICODE
+#if 0
 	#include <wchar.h>
 #endif
 
 #if defined(_MSC_VER)
 	#pragma warning(push)
-	#pragma warning(disable : 26812) 
+	#pragma warning(disable : 26812)
 #endif
 
 #define MU_TRY  \
@@ -117,7 +117,7 @@ private:
 static muChar_t s_tmpOutBuf[2048];
 
 template <typename T>
-constexpr std::size_t count_of(const T& array) 
+constexpr std::size_t count_of(const T& array)
 {
 	return (sizeof(array) / sizeof(array[0]));
 }
@@ -207,7 +207,7 @@ API_EXPORT(const muChar_t*) mupGetVersion(muParserHandle_t a_hParser)
 	MU_TRY
 		muParser_t* const p(AsParser(a_hParser));
 
-#ifndef _UNICODE
+#if 1
 		sprintf(s_tmpOutBuf, "%s", p->GetVersion().c_str());
 #else
 //		wsprintf(s_tmpOutBuf, _T("%s"), p->GetVersion().c_str());
@@ -235,7 +235,7 @@ API_EXPORT(muFloat_t*) mupEvalMulti(muParserHandle_t a_hParser, int* nNum)
 {
 	MU_TRY
 		if (nNum == nullptr)
-			throw std::runtime_error("Argument is null!"); 
+			throw std::runtime_error("Argument is null!");
 
 		muParser_t* const p(AsParser(a_hParser));
 		return p->Eval(*nNum);
@@ -875,7 +875,7 @@ API_EXPORT(const muChar_t*) mupGetExpr(muParserHandle_t a_hParser)
 
 		// C# explodes when pMsg is returned directly. For some reason it can't access
 		// the memory where the message lies directly.
-#ifndef _UNICODE
+#if 1
 		sprintf(s_tmpOutBuf, "%s", p->GetExpr().c_str());
 #else
 //		wsprintf(s_tmpOutBuf, _T("%s"), p->GetExpr().c_str());
@@ -982,7 +982,7 @@ API_EXPORT(void) mupGetVar(muParserHandle_t a_hParser, unsigned a_iVar, const mu
 		for (unsigned i = 0; i < a_iVar; ++i)
 			++item;
 
-#ifndef _UNICODE
+#if 1
 		strncpy(szName, item->first.c_str(), count_of(szName));
 #else
 		wcsncpy(szName, item->first.c_str(), count_of(szName));
@@ -1055,7 +1055,7 @@ API_EXPORT(void) mupGetExprVar(muParserHandle_t a_hParser, unsigned a_iVar, cons
 		for (unsigned i = 0; i < a_iVar; ++i)
 			++item;
 
-#ifndef _UNICODE
+#if 1
 		strncpy(szName, item->first.c_str(), count_of(szName));
 #else
 		wcsncpy(szName, item->first.c_str(), count_of(szName));
@@ -1150,7 +1150,7 @@ API_EXPORT(void) mupGetConst(muParserHandle_t a_hParser, unsigned a_iVar, const
 		for (unsigned i = 0; i < a_iVar; ++i)
 			++item;
 
-#ifndef _UNICODE
+#if 1
 		strncpy(szName, item->first.c_str(), count_of(szName));
 #else
 		wcsncpy(szName, item->first.c_str(), count_of(szName));
@@ -1213,7 +1213,7 @@ API_EXPORT(const muChar_t*) mupGetErrorMsg(muParserHandle_t a_hParser)
 
 	// C# explodes when pMsg is returned directly. For some reason it can't access
 	// the memory where the message lies directly.
-#ifndef _UNICODE
+#if 1
 	sprintf(s_tmpOutBuf, "%s", pMsg);
 #else
 	//wsprintf(s_tmpOutBuf, _T("%s"), pMsg);
@@ -1232,7 +1232,7 @@ API_EXPORT(const muChar_t*) mupGetErrorToken(muParserHandle_t a_hParser)
 
 	// C# explodes when pMsg is returned directly. For some reason it can't access
 	// the memory where the message lies directly.
-#ifndef _UNICODE
+#if 1
 	sprintf(s_tmpOutBuf, "%s", pToken);
 #else
 	//wsprintf(s_tmpOutBuf, _T("%s"), pToken);
