diff --git c/contrib/minizip/iowin32.h i/contrib/minizip/iowin32.h
index a23a65d..b048226 100644
--- c/contrib/minizip/iowin32.h
+++ i/contrib/minizip/iowin32.h
@@ -12,16 +12,16 @@
 */
 
 #include <windows.h>
-
+#include "minizip_extern.h"
 
 #ifdef __cplusplus
 extern "C" {
 #endif
 
-void fill_win32_filefunc(zlib_filefunc_def* pzlib_filefunc_def);
-void fill_win32_filefunc64(zlib_filefunc64_def* pzlib_filefunc_def);
-void fill_win32_filefunc64A(zlib_filefunc64_def* pzlib_filefunc_def);
-void fill_win32_filefunc64W(zlib_filefunc64_def* pzlib_filefunc_def);
+MINIZIP_EXTERN void fill_win32_filefunc(zlib_filefunc_def* pzlib_filefunc_def);
+MINIZIP_EXTERN void fill_win32_filefunc64(zlib_filefunc64_def* pzlib_filefunc_def);
+MINIZIP_EXTERN void fill_win32_filefunc64A(zlib_filefunc64_def* pzlib_filefunc_def);
+MINIZIP_EXTERN void fill_win32_filefunc64W(zlib_filefunc64_def* pzlib_filefunc_def);
 
 #ifdef __cplusplus
 }
diff --git c/contrib/minizip/minizip1.rc i/contrib/minizip/minizip1.rc
new file mode 100644
index 0000000..1c07357
--- /dev/null
+++ i/contrib/minizip/minizip1.rc
@@ -0,0 +1,39 @@
+#include <winver.h>
+
+#ifdef GCC_WINDRES
+VS_VERSION_INFO		VERSIONINFO
+#else
+VS_VERSION_INFO		VERSIONINFO	MOVEABLE IMPURE LOADONCALL DISCARDABLE
+#endif
+  FILEVERSION		1,1,0,0
+  PRODUCTVERSION	1,1,0,0
+  FILEFLAGSMASK		VS_FFI_FILEFLAGSMASK
+#ifdef _DEBUG
+  FILEFLAGS		1
+#else
+  FILEFLAGS		0
+#endif
+  FILEOS		VOS__WINDOWS32
+  FILETYPE		VFT_DLL
+  FILESUBTYPE		0	// not used
+BEGIN
+  BLOCK "StringFileInfo"
+  BEGIN
+    BLOCK "040904E4"
+    //language ID = U.S. English, char set = Windows, Multilingual
+    BEGIN
+      VALUE "FileDescription",  "MiniZip - Zip and UnZip additionnal library for zlib\0"
+      VALUE "FileVersion",      "1.1.0\0"
+      VALUE "InternalName",     "minizip1.dll\0"
+      VALUE "LegalCopyright",	"(C) 1998-2010 Gilles Vollant & Mathias Svensson\0"
+      VALUE "OriginalFilename",	"minizip1.dll\0"
+      VALUE "ProductName",      "minizip\0"
+      VALUE "ProductVersion",	"1.1.0\0"
+      VALUE "Comments",		    "For more information visit http://www.winimage.com/zLibDll/minizip.html/\0"
+    END
+  END
+  BLOCK "VarFileInfo"
+  BEGIN
+    VALUE "Translation", 0x0409, 1252
+  END
+END
diff --git c/contrib/minizip/minizip_extern.h i/contrib/minizip/minizip_extern.h
new file mode 100644
index 0000000..7f3580d
--- /dev/null
+++ i/contrib/minizip/minizip_extern.h
@@ -0,0 +1,21 @@
+/*
+MiniZip DLL import/export
+Dmitriy Vetutnev, ODANT 2017
+*/
+
+#ifndef MINIZIP_EXTERN_H
+#define MINIZIP_EXTERN_H
+
+#if defined(_WIN32) && defined(MINIZIP_DLL)
+	#if defined(MINIZIP_BUILDING)
+		#define MINIZIP_EXTERN __declspec(dllexport)
+	#else
+		#define MINIZIP_EXTERN __declspec(dllimport)
+	#endif
+#endif
+
+#ifndef MINIZIP_EXTERN
+    #define MINIZIP_EXTERN extern
+#endif
+
+#endif /* MINIZIP_EXTERN_H */
diff --git c/contrib/minizip/mztools.c i/contrib/minizip/mztools.c
index c8d2375..37e1cb2 100644
--- c/contrib/minizip/mztools.c
+++ i/contrib/minizip/mztools.c
@@ -27,7 +27,7 @@
   WRITE_16((unsigned char*)(buff) + 2, (n) >> 16); \
 } while(0)
 
-extern int ZEXPORT unzRepair(const char* file, const char* fileOut, const char* fileOutTmp, uLong* nRecovered, uLong* bytesRecovered) {
+MINIZIP_EXTERN int ZEXPORT unzRepair(const char* file, const char* fileOut, const char* fileOutTmp, uLong* nRecovered, uLong* bytesRecovered) {
   int err = Z_OK;
   FILE* fpZip = fopen(file, "rb");
   FILE* fpOut = fopen(fileOut, "wb");
diff --git c/contrib/minizip/mztools.h i/contrib/minizip/mztools.h
index a49a426..b76eece 100644
--- c/contrib/minizip/mztools.h
+++ i/contrib/minizip/mztools.h
@@ -22,7 +22,7 @@ extern "C" {
    fileOut: output file after recovery
    fileOutTmp: temporary file name used for recovery
 */
-extern int ZEXPORT unzRepair(const char* file,
+MINIZIP_EXTERN int ZEXPORT unzRepair(const char* file,
                              const char* fileOut,
                              const char* fileOutTmp,
                              uLong* nRecovered,
diff --git c/contrib/minizip/unzip.c i/contrib/minizip/unzip.c
index ed763f8..76f6c81 100644
--- c/contrib/minizip/unzip.c
+++ i/contrib/minizip/unzip.c
@@ -300,7 +300,7 @@ local int strcmpcasenosensitive_internal(const char* fileName1, const char* file
         (like 1 on Unix, 2 on Windows)
 
 */
-extern int ZEXPORT unzStringFileNameCompare (const char*  fileName1,
+MINIZIP_EXTERN int ZEXPORT unzStringFileNameCompare (const char*  fileName1,
                                              const char*  fileName2,
                                              int iCaseSensitivity) {
     if (iCaseSensitivity==0)
@@ -669,7 +669,7 @@ local unzFile unzOpenInternal(const void *path,
 }
 
 
-extern unzFile ZEXPORT unzOpen2(const char *path,
+MINIZIP_EXTERN unzFile ZEXPORT unzOpen2(const char *path,
                                 zlib_filefunc_def* pzlib_filefunc32_def) {
     if (pzlib_filefunc32_def != NULL)
     {
@@ -681,7 +681,7 @@ extern unzFile ZEXPORT unzOpen2(const char *path,
         return unzOpenInternal(path, NULL, 0);
 }
 
-extern unzFile ZEXPORT unzOpen2_64(const void *path,
+MINIZIP_EXTERN unzFile ZEXPORT unzOpen2_64(const void *path,
                                    zlib_filefunc64_def* pzlib_filefunc_def) {
     if (pzlib_filefunc_def != NULL)
     {
@@ -695,11 +695,11 @@ extern unzFile ZEXPORT unzOpen2_64(const void *path,
         return unzOpenInternal(path, NULL, 1);
 }
 
-extern unzFile ZEXPORT unzOpen(const char *path) {
+MINIZIP_EXTERN unzFile ZEXPORT unzOpen(const char *path) {
     return unzOpenInternal(path, NULL, 0);
 }
 
-extern unzFile ZEXPORT unzOpen64(const void *path) {
+MINIZIP_EXTERN unzFile ZEXPORT unzOpen64(const void *path) {
     return unzOpenInternal(path, NULL, 1);
 }
 
@@ -708,7 +708,7 @@ extern unzFile ZEXPORT unzOpen64(const void *path) {
   If there is files inside the .Zip opened with unzOpenCurrentFile (see later),
     these files MUST be closed with unzCloseCurrentFile before call unzClose.
   return UNZ_OK if there is no problem. */
-extern int ZEXPORT unzClose(unzFile file) {
+MINIZIP_EXTERN int ZEXPORT unzClose(unzFile file) {
     unz64_s* s;
     if (file==NULL)
         return UNZ_PARAMERROR;
@@ -727,7 +727,7 @@ extern int ZEXPORT unzClose(unzFile file) {
   Write info about the ZipFile in the *pglobal_info structure.
   No preparation of the structure is needed
   return UNZ_OK if there is no problem. */
-extern int ZEXPORT unzGetGlobalInfo64(unzFile file, unz_global_info64* pglobal_info) {
+MINIZIP_EXTERN int ZEXPORT unzGetGlobalInfo64(unzFile file, unz_global_info64* pglobal_info) {
     unz64_s* s;
     if (file==NULL)
         return UNZ_PARAMERROR;
@@ -736,7 +736,7 @@ extern int ZEXPORT unzGetGlobalInfo64(unzFile file, unz_global_info64* pglobal_i
     return UNZ_OK;
 }
 
-extern int ZEXPORT unzGetGlobalInfo(unzFile file, unz_global_info* pglobal_info32) {
+MINIZIP_EXTERN int ZEXPORT unzGetGlobalInfo(unzFile file, unz_global_info* pglobal_info32) {
     unz64_s* s;
     if (file==NULL)
         return UNZ_PARAMERROR;
@@ -1006,7 +1006,7 @@ local int unz64local_GetCurrentFileInfoInternal(unzFile file,
   No preparation of the structure is needed
   return UNZ_OK if there is no problem.
 */
-extern int ZEXPORT unzGetCurrentFileInfo64(unzFile file,
+MINIZIP_EXTERN int ZEXPORT unzGetCurrentFileInfo64(unzFile file,
                                            unz_file_info64 * pfile_info,
                                            char * szFileName, uLong fileNameBufferSize,
                                            void *extraField, uLong extraFieldBufferSize,
@@ -1017,7 +1017,7 @@ extern int ZEXPORT unzGetCurrentFileInfo64(unzFile file,
                                                  szComment,commentBufferSize);
 }
 
-extern int ZEXPORT unzGetCurrentFileInfo(unzFile file,
+MINIZIP_EXTERN int ZEXPORT unzGetCurrentFileInfo(unzFile file,
                                          unz_file_info * pfile_info,
                                          char * szFileName, uLong fileNameBufferSize,
                                          void *extraField, uLong extraFieldBufferSize,
@@ -1058,7 +1058,7 @@ extern int ZEXPORT unzGetCurrentFileInfo(unzFile file,
   Set the current file of the zipfile to the first file.
   return UNZ_OK if there is no problem
 */
-extern int ZEXPORT unzGoToFirstFile(unzFile file) {
+MINIZIP_EXTERN int ZEXPORT unzGoToFirstFile(unzFile file) {
     int err=UNZ_OK;
     unz64_s* s;
     if (file==NULL)
@@ -1078,7 +1078,7 @@ extern int ZEXPORT unzGoToFirstFile(unzFile file) {
   return UNZ_OK if there is no problem
   return UNZ_END_OF_LIST_OF_FILE if the actual file was the latest.
 */
-extern int ZEXPORT unzGoToNextFile(unzFile file) {
+MINIZIP_EXTERN int ZEXPORT unzGoToNextFile(unzFile file) {
     unz64_s* s;
     int err;
 
@@ -1110,7 +1110,7 @@ extern int ZEXPORT unzGoToNextFile(unzFile file) {
   UNZ_OK if the file is found. It becomes the current file.
   UNZ_END_OF_LIST_OF_FILE if the file is not found
 */
-extern int ZEXPORT unzLocateFile(unzFile file, const char *szFileName, int iCaseSensitivity) {
+MINIZIP_EXTERN int ZEXPORT unzLocateFile(unzFile file, const char *szFileName, int iCaseSensitivity) {
     unz64_s* s;
     int err;
 
@@ -1185,7 +1185,7 @@ typedef struct unz_file_pos_s
 } unz_file_pos;
 */
 
-extern int ZEXPORT unzGetFilePos64(unzFile file, unz64_file_pos* file_pos) {
+MINIZIP_EXTERN int ZEXPORT unzGetFilePos64(unzFile file, unz64_file_pos* file_pos) {
     unz64_s* s;
 
     if (file==NULL || file_pos==NULL)
@@ -1200,7 +1200,7 @@ extern int ZEXPORT unzGetFilePos64(unzFile file, unz64_file_pos* file_pos) {
     return UNZ_OK;
 }
 
-extern int ZEXPORT unzGetFilePos(unzFile file, unz_file_pos* file_pos) {
+MINIZIP_EXTERN int ZEXPORT unzGetFilePos(unzFile file, unz_file_pos* file_pos) {
     unz64_file_pos file_pos64;
     int err = unzGetFilePos64(file,&file_pos64);
     if (err==UNZ_OK)
@@ -1211,7 +1211,7 @@ extern int ZEXPORT unzGetFilePos(unzFile file, unz_file_pos* file_pos) {
     return err;
 }
 
-extern int ZEXPORT unzGoToFilePos64(unzFile file, const unz64_file_pos* file_pos) {
+MINIZIP_EXTERN int ZEXPORT unzGoToFilePos64(unzFile file, const unz64_file_pos* file_pos) {
     unz64_s* s;
     int err;
 
@@ -1232,7 +1232,7 @@ extern int ZEXPORT unzGoToFilePos64(unzFile file, const unz64_file_pos* file_pos
     return err;
 }
 
-extern int ZEXPORT unzGoToFilePos(unzFile file, unz_file_pos* file_pos) {
+MINIZIP_EXTERN int ZEXPORT unzGoToFilePos(unzFile file, unz_file_pos* file_pos) {
     unz64_file_pos file_pos64;
     if (file_pos == NULL)
         return UNZ_PARAMERROR;
@@ -1340,7 +1340,7 @@ local int unz64local_CheckCurrentFileCoherencyHeader(unz64_s* s, uInt* piSizeVar
   Open for reading data the current file in the zipfile.
   If there is no error and the file is opened, the return value is UNZ_OK.
 */
-extern int ZEXPORT unzOpenCurrentFile3(unzFile file, int* method,
+MINIZIP_EXTERN int ZEXPORT unzOpenCurrentFile3(unzFile file, int* method,
                                        int* level, int raw, const char* password) {
     int err=UNZ_OK;
     uInt iSizeVar;
@@ -1510,21 +1510,21 @@ extern int ZEXPORT unzOpenCurrentFile3(unzFile file, int* method,
     return UNZ_OK;
 }
 
-extern int ZEXPORT unzOpenCurrentFile(unzFile file) {
+MINIZIP_EXTERN int ZEXPORT unzOpenCurrentFile(unzFile file) {
     return unzOpenCurrentFile3(file, NULL, NULL, 0, NULL);
 }
 
-extern int ZEXPORT unzOpenCurrentFilePassword(unzFile file, const char* password) {
+MINIZIP_EXTERN int ZEXPORT unzOpenCurrentFilePassword(unzFile file, const char* password) {
     return unzOpenCurrentFile3(file, NULL, NULL, 0, password);
 }
 
-extern int ZEXPORT unzOpenCurrentFile2(unzFile file, int* method, int* level, int raw) {
+MINIZIP_EXTERN int ZEXPORT unzOpenCurrentFile2(unzFile file, int* method, int* level, int raw) {
     return unzOpenCurrentFile3(file, method, level, raw, NULL);
 }
 
 /** Addition for GDAL : START */
 
-extern ZPOS64_T ZEXPORT unzGetCurrentFileZStreamPos64(unzFile file) {
+MINIZIP_EXTERN ZPOS64_T ZEXPORT unzGetCurrentFileZStreamPos64(unzFile file) {
     unz64_s* s;
     file_in_zip64_read_info_s* pfile_in_zip_read_info;
     s=(unz64_s*)file;
@@ -1549,7 +1549,7 @@ extern ZPOS64_T ZEXPORT unzGetCurrentFileZStreamPos64(unzFile file) {
   return <0 with error code if there is an error
     (UNZ_ERRNO for IO error, or zLib error for uncompress error)
 */
-extern int ZEXPORT unzReadCurrentFile(unzFile file, voidp buf, unsigned len) {
+MINIZIP_EXTERN int ZEXPORT unzReadCurrentFile(unzFile file, voidp buf, unsigned len) {
     int err=UNZ_OK;
     uInt iRead = 0;
     unz64_s* s;
@@ -1756,7 +1756,7 @@ extern int ZEXPORT unzReadCurrentFile(unzFile file, voidp buf, unsigned len) {
 /*
   Give the current position in uncompressed data
 */
-extern z_off_t ZEXPORT unztell(unzFile file) {
+MINIZIP_EXTERN z_off_t ZEXPORT unztell(unzFile file) {
     unz64_s* s;
     file_in_zip64_read_info_s* pfile_in_zip_read_info;
     if (file==NULL)
@@ -1770,7 +1770,7 @@ extern z_off_t ZEXPORT unztell(unzFile file) {
     return (z_off_t)pfile_in_zip_read_info->stream.total_out;
 }
 
-extern ZPOS64_T ZEXPORT unztell64(unzFile file) {
+MINIZIP_EXTERN ZPOS64_T ZEXPORT unztell64(unzFile file) {
 
     unz64_s* s;
     file_in_zip64_read_info_s* pfile_in_zip_read_info;
@@ -1789,7 +1789,7 @@ extern ZPOS64_T ZEXPORT unztell64(unzFile file) {
 /*
   return 1 if the end of file was reached, 0 elsewhere
 */
-extern int ZEXPORT unzeof(unzFile file) {
+MINIZIP_EXTERN int ZEXPORT unzeof(unzFile file) {
     unz64_s* s;
     file_in_zip64_read_info_s* pfile_in_zip_read_info;
     if (file==NULL)
@@ -1820,7 +1820,7 @@ more info in the local-header version than in the central-header)
   the return value is the number of bytes copied in buf, or (if <0)
     the error code
 */
-extern int ZEXPORT unzGetLocalExtrafield(unzFile file, voidp buf, unsigned len) {
+MINIZIP_EXTERN int ZEXPORT unzGetLocalExtrafield(unzFile file, voidp buf, unsigned len) {
     unz64_s* s;
     file_in_zip64_read_info_s* pfile_in_zip_read_info;
     uInt read_now;
@@ -1867,7 +1867,7 @@ extern int ZEXPORT unzGetLocalExtrafield(unzFile file, voidp buf, unsigned len)
   Close the file in zip opened with unzOpenCurrentFile
   Return UNZ_CRCERROR if all the file was read but the CRC is not good
 */
-extern int ZEXPORT unzCloseCurrentFile(unzFile file) {
+MINIZIP_EXTERN int ZEXPORT unzCloseCurrentFile(unzFile file) {
     int err=UNZ_OK;
 
     unz64_s* s;
@@ -1913,7 +1913,7 @@ extern int ZEXPORT unzCloseCurrentFile(unzFile file) {
   uSizeBuf is the size of the szComment buffer.
   return the number of byte copied or an error code <0
 */
-extern int ZEXPORT unzGetGlobalComment(unzFile file, char * szComment, uLong uSizeBuf) {
+MINIZIP_EXTERN int ZEXPORT unzGetGlobalComment(unzFile file, char * szComment, uLong uSizeBuf) {
     unz64_s* s;
     uLong uReadThis ;
     if (file==NULL)
@@ -1940,7 +1940,7 @@ extern int ZEXPORT unzGetGlobalComment(unzFile file, char * szComment, uLong uSi
 }
 
 /* Additions by RX '2004 */
-extern ZPOS64_T ZEXPORT unzGetOffset64(unzFile file) {
+MINIZIP_EXTERN ZPOS64_T ZEXPORT unzGetOffset64(unzFile file) {
     unz64_s* s;
 
     if (file==NULL)
@@ -1954,7 +1954,7 @@ extern ZPOS64_T ZEXPORT unzGetOffset64(unzFile file) {
     return s->pos_in_central_dir;
 }
 
-extern uLong ZEXPORT unzGetOffset(unzFile file) {
+MINIZIP_EXTERN uLong ZEXPORT unzGetOffset(unzFile file) {
     ZPOS64_T offset64;
 
     if (file==NULL)
@@ -1963,7 +1963,7 @@ extern uLong ZEXPORT unzGetOffset(unzFile file) {
     return (uLong)offset64;
 }
 
-extern int ZEXPORT unzSetOffset64(unzFile file, ZPOS64_T pos) {
+MINIZIP_EXTERN int ZEXPORT unzSetOffset64(unzFile file, ZPOS64_T pos) {
     unz64_s* s;
     int err;
 
@@ -1980,6 +1980,6 @@ extern int ZEXPORT unzSetOffset64(unzFile file, ZPOS64_T pos) {
     return err;
 }
 
-extern int ZEXPORT unzSetOffset (unzFile file, uLong pos) {
+MINIZIP_EXTERN int ZEXPORT unzSetOffset (unzFile file, uLong pos) {
     return unzSetOffset64(file,pos);
 }
diff --git c/contrib/minizip/unzip.h i/contrib/minizip/unzip.h
index 1410584..7a01b25 100644
--- c/contrib/minizip/unzip.h
+++ i/contrib/minizip/unzip.h
@@ -61,6 +61,8 @@ extern "C" {
 
 #define Z_BZIP2ED 12
 
+#include "minizip_extern.h"
+
 #if defined(STRICTUNZIP) || defined(STRICTZIPUNZIP)
 /* like the STRICT of WIN32, we define a pointer that cannot be converted
     from (void*) without cast */
@@ -150,7 +152,7 @@ typedef struct unz_file_info_s
     tm_unz tmu_date;
 } unz_file_info;
 
-extern int ZEXPORT unzStringFileNameCompare(const char* fileName1,
+MINIZIP_EXTERN int ZEXPORT unzStringFileNameCompare(const char* fileName1,
                                             const char* fileName2,
                                             int iCaseSensitivity);
 /*
@@ -163,8 +165,8 @@ extern int ZEXPORT unzStringFileNameCompare(const char* fileName1,
 */
 
 
-extern unzFile ZEXPORT unzOpen(const char *path);
-extern unzFile ZEXPORT unzOpen64(const void *path);
+MINIZIP_EXTERN unzFile ZEXPORT unzOpen(const char *path);
+MINIZIP_EXTERN unzFile ZEXPORT unzOpen64(const void *path);
 /*
   Open a Zip file. path contain the full pathname (by example,
      on a Windows XP computer "c:\\zlib\\zlib113.zip" or on an Unix computer
@@ -181,31 +183,31 @@ extern unzFile ZEXPORT unzOpen64(const void *path);
 */
 
 
-extern unzFile ZEXPORT unzOpen2(const char *path,
+MINIZIP_EXTERN unzFile ZEXPORT unzOpen2(const char *path,
                                 zlib_filefunc_def* pzlib_filefunc_def);
 /*
    Open a Zip file, like unzOpen, but provide a set of file low level API
       for read/write the zip file (see ioapi.h)
 */
 
-extern unzFile ZEXPORT unzOpen2_64(const void *path,
+MINIZIP_EXTERN unzFile ZEXPORT unzOpen2_64(const void *path,
                                    zlib_filefunc64_def* pzlib_filefunc_def);
 /*
    Open a Zip file, like unz64Open, but provide a set of file low level API
       for read/write the zip file (see ioapi.h)
 */
 
-extern int ZEXPORT unzClose(unzFile file);
+MINIZIP_EXTERN int ZEXPORT unzClose(unzFile file);
 /*
   Close a ZipFile opened with unzOpen.
   If there is files inside the .Zip opened with unzOpenCurrentFile (see later),
     these files MUST be closed with unzCloseCurrentFile before call unzClose.
   return UNZ_OK if there is no problem. */
 
-extern int ZEXPORT unzGetGlobalInfo(unzFile file,
+MINIZIP_EXTERN int ZEXPORT unzGetGlobalInfo(unzFile file,
                                     unz_global_info *pglobal_info);
 
-extern int ZEXPORT unzGetGlobalInfo64(unzFile file,
+MINIZIP_EXTERN int ZEXPORT unzGetGlobalInfo64(unzFile file,
                                       unz_global_info64 *pglobal_info);
 /*
   Write info about the ZipFile in the *pglobal_info structure.
@@ -213,7 +215,7 @@ extern int ZEXPORT unzGetGlobalInfo64(unzFile file,
   return UNZ_OK if there is no problem. */
 
 
-extern int ZEXPORT unzGetGlobalComment(unzFile file,
+MINIZIP_EXTERN int ZEXPORT unzGetGlobalComment(unzFile file,
                                        char *szComment,
                                        uLong uSizeBuf);
 /*
@@ -226,20 +228,20 @@ extern int ZEXPORT unzGetGlobalComment(unzFile file,
 /***************************************************************************/
 /* Unzip package allow you browse the directory of the zipfile */
 
-extern int ZEXPORT unzGoToFirstFile(unzFile file);
+MINIZIP_EXTERN int ZEXPORT unzGoToFirstFile(unzFile file);
 /*
   Set the current file of the zipfile to the first file.
   return UNZ_OK if there is no problem
 */
 
-extern int ZEXPORT unzGoToNextFile(unzFile file);
+MINIZIP_EXTERN int ZEXPORT unzGoToNextFile(unzFile file);
 /*
   Set the current file of the zipfile to the next file.
   return UNZ_OK if there is no problem
   return UNZ_END_OF_LIST_OF_FILE if the actual file was the latest.
 */
 
-extern int ZEXPORT unzLocateFile(unzFile file,
+MINIZIP_EXTERN int ZEXPORT unzLocateFile(unzFile file,
                                  const char *szFileName,
                                  int iCaseSensitivity);
 /*
@@ -261,11 +263,11 @@ typedef struct unz_file_pos_s
     uLong num_of_file;            /* # of file */
 } unz_file_pos;
 
-extern int ZEXPORT unzGetFilePos(
+MINIZIP_EXTERN int ZEXPORT unzGetFilePos(
     unzFile file,
     unz_file_pos* file_pos);
 
-extern int ZEXPORT unzGoToFilePos(
+MINIZIP_EXTERN int ZEXPORT unzGoToFilePos(
     unzFile file,
     unz_file_pos* file_pos);
 
@@ -275,17 +277,17 @@ typedef struct unz64_file_pos_s
     ZPOS64_T num_of_file;            /* # of file */
 } unz64_file_pos;
 
-extern int ZEXPORT unzGetFilePos64(
+MINIZIP_EXTERN int ZEXPORT unzGetFilePos64(
     unzFile file,
     unz64_file_pos* file_pos);
 
-extern int ZEXPORT unzGoToFilePos64(
+MINIZIP_EXTERN int ZEXPORT unzGoToFilePos64(
     unzFile file,
     const unz64_file_pos* file_pos);
 
 /* ****************************************** */
 
-extern int ZEXPORT unzGetCurrentFileInfo64(unzFile file,
+MINIZIP_EXTERN int ZEXPORT unzGetCurrentFileInfo64(unzFile file,
                                            unz_file_info64 *pfile_info,
                                            char *szFileName,
                                            uLong fileNameBufferSize,
@@ -294,7 +296,7 @@ extern int ZEXPORT unzGetCurrentFileInfo64(unzFile file,
                                            char *szComment,
                                            uLong commentBufferSize);
 
-extern int ZEXPORT unzGetCurrentFileInfo(unzFile file,
+MINIZIP_EXTERN int ZEXPORT unzGetCurrentFileInfo(unzFile file,
                                          unz_file_info *pfile_info,
                                          char *szFileName,
                                          uLong fileNameBufferSize,
@@ -318,7 +320,7 @@ extern int ZEXPORT unzGetCurrentFileInfo(unzFile file,
 
 /** Addition for GDAL : START */
 
-extern ZPOS64_T ZEXPORT unzGetCurrentFileZStreamPos64(unzFile file);
+MINIZIP_EXTERN ZPOS64_T ZEXPORT unzGetCurrentFileZStreamPos64(unzFile file);
 
 /** Addition for GDAL : END */
 
@@ -328,13 +330,13 @@ extern ZPOS64_T ZEXPORT unzGetCurrentFileZStreamPos64(unzFile file);
    from it, and close it (you can close it before reading all the file)
    */
 
-extern int ZEXPORT unzOpenCurrentFile(unzFile file);
+MINIZIP_EXTERN int ZEXPORT unzOpenCurrentFile(unzFile file);
 /*
   Open for reading data the current file in the zipfile.
   If there is no error, the return value is UNZ_OK.
 */
 
-extern int ZEXPORT unzOpenCurrentFilePassword(unzFile file,
+MINIZIP_EXTERN int ZEXPORT unzOpenCurrentFilePassword(unzFile file,
                                               const char* password);
 /*
   Open for reading data the current file in the zipfile.
@@ -342,7 +344,7 @@ extern int ZEXPORT unzOpenCurrentFilePassword(unzFile file,
   If there is no error, the return value is UNZ_OK.
 */
 
-extern int ZEXPORT unzOpenCurrentFile2(unzFile file,
+MINIZIP_EXTERN int ZEXPORT unzOpenCurrentFile2(unzFile file,
                                        int* method,
                                        int* level,
                                        int raw);
@@ -355,7 +357,7 @@ extern int ZEXPORT unzOpenCurrentFile2(unzFile file,
          but you CANNOT set method parameter as NULL
 */
 
-extern int ZEXPORT unzOpenCurrentFile3(unzFile file,
+MINIZIP_EXTERN int ZEXPORT unzOpenCurrentFile3(unzFile file,
                                        int* method,
                                        int* level,
                                        int raw,
@@ -370,13 +372,13 @@ extern int ZEXPORT unzOpenCurrentFile3(unzFile file,
 */
 
 
-extern int ZEXPORT unzCloseCurrentFile(unzFile file);
+MINIZIP_EXTERN int ZEXPORT unzCloseCurrentFile(unzFile file);
 /*
   Close the file in zip opened with unzOpenCurrentFile
   Return UNZ_CRCERROR if all the file was read but the CRC is not good
 */
 
-extern int ZEXPORT unzReadCurrentFile(unzFile file,
+MINIZIP_EXTERN int ZEXPORT unzReadCurrentFile(unzFile file,
                                       voidp buf,
                                       unsigned len);
 /*
@@ -390,19 +392,19 @@ extern int ZEXPORT unzReadCurrentFile(unzFile file,
     (UNZ_ERRNO for IO error, or zLib error for uncompress error)
 */
 
-extern z_off_t ZEXPORT unztell(unzFile file);
+MINIZIP_EXTERN z_off_t ZEXPORT unztell(unzFile file);
 
-extern ZPOS64_T ZEXPORT unztell64(unzFile file);
+MINIZIP_EXTERN ZPOS64_T ZEXPORT unztell64(unzFile file);
 /*
   Give the current position in uncompressed data
 */
 
-extern int ZEXPORT unzeof(unzFile file);
+MINIZIP_EXTERN int ZEXPORT unzeof(unzFile file);
 /*
   return 1 if the end of file was reached, 0 elsewhere
 */
 
-extern int ZEXPORT unzGetLocalExtrafield(unzFile file,
+MINIZIP_EXTERN int ZEXPORT unzGetLocalExtrafield(unzFile file,
                                          voidp buf,
                                          unsigned len);
 /*
@@ -421,12 +423,12 @@ extern int ZEXPORT unzGetLocalExtrafield(unzFile file,
 /***************************************************************************/
 
 /* Get the current file offset */
-extern ZPOS64_T ZEXPORT unzGetOffset64 (unzFile file);
-extern uLong ZEXPORT unzGetOffset (unzFile file);
+MINIZIP_EXTERN ZPOS64_T ZEXPORT unzGetOffset64 (unzFile file);
+MINIZIP_EXTERN uLong ZEXPORT unzGetOffset (unzFile file);
 
 /* Set the current file offset */
-extern int ZEXPORT unzSetOffset64 (unzFile file, ZPOS64_T pos);
-extern int ZEXPORT unzSetOffset (unzFile file, uLong pos);
+MINIZIP_EXTERN int ZEXPORT unzSetOffset64 (unzFile file, ZPOS64_T pos);
+MINIZIP_EXTERN int ZEXPORT unzSetOffset (unzFile file, uLong pos);
 
 
 
diff --git c/contrib/minizip/zip.c i/contrib/minizip/zip.c
index 3d3d4ca..7744497 100644
--- c/contrib/minizip/zip.c
+++ i/contrib/minizip/zip.c
@@ -813,7 +813,7 @@ local int LoadCentralDirectoryRecord(zip64_internal* pziinit) {
 
 
 /************************************************************/
-extern zipFile ZEXPORT zipOpen3(const void *pathname, int append, zipcharpc* globalcomment, zlib_filefunc64_32_def* pzlib_filefunc64_32_def) {
+MINIZIP_EXTERN zipFile ZEXPORT zipOpen3(const void *pathname, int append, zipcharpc* globalcomment, zlib_filefunc64_32_def* pzlib_filefunc64_32_def) {
     zip64_internal ziinit;
     zip64_internal* zi;
     int err=ZIP_OK;
@@ -883,7 +883,7 @@ extern zipFile ZEXPORT zipOpen3(const void *pathname, int append, zipcharpc* glo
     }
 }
 
-extern zipFile ZEXPORT zipOpen2(const char *pathname, int append, zipcharpc* globalcomment, zlib_filefunc_def* pzlib_filefunc32_def) {
+MINIZIP_EXTERN zipFile ZEXPORT zipOpen2(const char *pathname, int append, zipcharpc* globalcomment, zlib_filefunc_def* pzlib_filefunc32_def) {
     if (pzlib_filefunc32_def != NULL)
     {
         zlib_filefunc64_32_def zlib_filefunc64_32_def_fill;
@@ -894,7 +894,7 @@ extern zipFile ZEXPORT zipOpen2(const char *pathname, int append, zipcharpc* glo
         return zipOpen3(pathname, append, globalcomment, NULL);
 }
 
-extern zipFile ZEXPORT zipOpen2_64(const void *pathname, int append, zipcharpc* globalcomment, zlib_filefunc64_def* pzlib_filefunc_def) {
+MINIZIP_EXTERN zipFile ZEXPORT zipOpen2_64(const void *pathname, int append, zipcharpc* globalcomment, zlib_filefunc64_def* pzlib_filefunc_def) {
     if (pzlib_filefunc_def != NULL)
     {
         zlib_filefunc64_32_def zlib_filefunc64_32_def_fill;
@@ -909,11 +909,11 @@ extern zipFile ZEXPORT zipOpen2_64(const void *pathname, int append, zipcharpc*
 
 
 
-extern zipFile ZEXPORT zipOpen(const char* pathname, int append) {
+MINIZIP_EXTERN zipFile ZEXPORT zipOpen(const char* pathname, int append) {
     return zipOpen3((const void*)pathname,append,NULL,NULL);
 }
 
-extern zipFile ZEXPORT zipOpen64(const void* pathname, int append) {
+MINIZIP_EXTERN zipFile ZEXPORT zipOpen64(const void* pathname, int append) {
     return zipOpen3(pathname,append,NULL,NULL);
 }
 
@@ -1013,7 +1013,7 @@ local int Write_LocalFileHeader(zip64_internal* zi, const char* filename, uInt s
  It is not done here because then we need to realloc a new buffer since parameters are 'const' and I want to minimize
  unnecessary allocations.
  */
-extern int ZEXPORT zipOpenNewFileInZip4_64(zipFile file, const char* filename, const zip_fileinfo* zipfi,
+MINIZIP_EXTERN int ZEXPORT zipOpenNewFileInZip4_64(zipFile file, const char* filename, const zip_fileinfo* zipfi,
                                            const void* extrafield_local, uInt size_extrafield_local,
                                            const void* extrafield_global, uInt size_extrafield_global,
                                            const char* comment, int method, int level, int raw,
@@ -1222,7 +1222,7 @@ extern int ZEXPORT zipOpenNewFileInZip4_64(zipFile file, const char* filename, c
     return err;
 }
 
-extern int ZEXPORT zipOpenNewFileInZip4(zipFile file, const char* filename, const zip_fileinfo* zipfi,
+MINIZIP_EXTERN int ZEXPORT zipOpenNewFileInZip4(zipFile file, const char* filename, const zip_fileinfo* zipfi,
                                         const void* extrafield_local, uInt size_extrafield_local,
                                         const void* extrafield_global, uInt size_extrafield_global,
                                         const char* comment, int method, int level, int raw,
@@ -1237,7 +1237,7 @@ extern int ZEXPORT zipOpenNewFileInZip4(zipFile file, const char* filename, cons
                                    password, crcForCrypting, versionMadeBy, flagBase, 0);
 }
 
-extern int ZEXPORT zipOpenNewFileInZip3(zipFile file, const char* filename, const zip_fileinfo* zipfi,
+MINIZIP_EXTERN int ZEXPORT zipOpenNewFileInZip3(zipFile file, const char* filename, const zip_fileinfo* zipfi,
                                         const void* extrafield_local, uInt size_extrafield_local,
                                         const void* extrafield_global, uInt size_extrafield_global,
                                         const char* comment, int method, int level, int raw,
@@ -1251,7 +1251,7 @@ extern int ZEXPORT zipOpenNewFileInZip3(zipFile file, const char* filename, cons
                                    password, crcForCrypting, VERSIONMADEBY, 0, 0);
 }
 
-extern int ZEXPORT zipOpenNewFileInZip3_64(zipFile file, const char* filename, const zip_fileinfo* zipfi,
+MINIZIP_EXTERN int ZEXPORT zipOpenNewFileInZip3_64(zipFile file, const char* filename, const zip_fileinfo* zipfi,
                                          const void* extrafield_local, uInt size_extrafield_local,
                                          const void* extrafield_global, uInt size_extrafield_global,
                                          const char* comment, int method, int level, int raw,
@@ -1265,7 +1265,7 @@ extern int ZEXPORT zipOpenNewFileInZip3_64(zipFile file, const char* filename, c
                                    password, crcForCrypting, VERSIONMADEBY, 0, zip64);
 }
 
-extern int ZEXPORT zipOpenNewFileInZip2(zipFile file, const char* filename, const zip_fileinfo* zipfi,
+MINIZIP_EXTERN int ZEXPORT zipOpenNewFileInZip2(zipFile file, const char* filename, const zip_fileinfo* zipfi,
                                         const void* extrafield_local, uInt size_extrafield_local,
                                         const void* extrafield_global, uInt size_extrafield_global,
                                         const char* comment, int method, int level, int raw) {
@@ -1277,7 +1277,7 @@ extern int ZEXPORT zipOpenNewFileInZip2(zipFile file, const char* filename, cons
                                    NULL, 0, VERSIONMADEBY, 0, 0);
 }
 
-extern int ZEXPORT zipOpenNewFileInZip2_64(zipFile file, const char* filename, const zip_fileinfo* zipfi,
+MINIZIP_EXTERN int ZEXPORT zipOpenNewFileInZip2_64(zipFile file, const char* filename, const zip_fileinfo* zipfi,
                                            const void* extrafield_local, uInt size_extrafield_local,
                                            const void* extrafield_global, uInt size_extrafield_global,
                                            const char* comment, int method, int level, int raw, int zip64) {
@@ -1289,7 +1289,7 @@ extern int ZEXPORT zipOpenNewFileInZip2_64(zipFile file, const char* filename, c
                                    NULL, 0, VERSIONMADEBY, 0, zip64);
 }
 
-extern int ZEXPORT zipOpenNewFileInZip64(zipFile file, const char* filename, const zip_fileinfo* zipfi,
+MINIZIP_EXTERN int ZEXPORT zipOpenNewFileInZip64(zipFile file, const char* filename, const zip_fileinfo* zipfi,
                                          const void* extrafield_local, uInt size_extrafield_local,
                                          const void*extrafield_global, uInt size_extrafield_global,
                                          const char* comment, int method, int level, int zip64) {
@@ -1301,7 +1301,7 @@ extern int ZEXPORT zipOpenNewFileInZip64(zipFile file, const char* filename, con
                                    NULL, 0, VERSIONMADEBY, 0, zip64);
 }
 
-extern int ZEXPORT zipOpenNewFileInZip(zipFile file, const char* filename, const zip_fileinfo* zipfi,
+MINIZIP_EXTERN int ZEXPORT zipOpenNewFileInZip(zipFile file, const char* filename, const zip_fileinfo* zipfi,
                                        const void* extrafield_local, uInt size_extrafield_local,
                                        const void*extrafield_global, uInt size_extrafield_global,
                                        const char* comment, int method, int level) {
@@ -1351,7 +1351,7 @@ local int zip64FlushWriteBuffer(zip64_internal* zi) {
     return err;
 }
 
-extern int ZEXPORT zipWriteInFileInZip(zipFile file, const void* buf, unsigned int len) {
+MINIZIP_EXTERN int ZEXPORT zipWriteInFileInZip(zipFile file, const void* buf, unsigned int len) {
     zip64_internal* zi;
     int err=ZIP_OK;
 
@@ -1452,11 +1452,11 @@ extern int ZEXPORT zipWriteInFileInZip(zipFile file, const void* buf, unsigned i
     return err;
 }
 
-extern int ZEXPORT zipCloseFileInZipRaw(zipFile file, uLong uncompressed_size, uLong crc32) {
+MINIZIP_EXTERN int ZEXPORT zipCloseFileInZipRaw(zipFile file, uLong uncompressed_size, uLong crc32) {
     return zipCloseFileInZipRaw64 (file, uncompressed_size, crc32);
 }
 
-extern int ZEXPORT zipCloseFileInZipRaw64(zipFile file, ZPOS64_T uncompressed_size, uLong crc32) {
+MINIZIP_EXTERN int ZEXPORT zipCloseFileInZipRaw64(zipFile file, ZPOS64_T uncompressed_size, uLong crc32) {
     zip64_internal* zi;
     ZPOS64_T compressed_size;
     uLong invalidValue = 0xffffffff;
@@ -1691,7 +1691,7 @@ extern int ZEXPORT zipCloseFileInZipRaw64(zipFile file, ZPOS64_T uncompressed_si
     return err;
 }
 
-extern int ZEXPORT zipCloseFileInZip(zipFile file) {
+MINIZIP_EXTERN int ZEXPORT zipCloseFileInZip(zipFile file) {
     return zipCloseFileInZipRaw (file,0,0);
 }
 
@@ -1819,7 +1819,7 @@ local int Write_GlobalComment(zip64_internal* zi, const char* global_comment) {
   return err;
 }
 
-extern int ZEXPORT zipClose(zipFile file, const char* global_comment) {
+MINIZIP_EXTERN int ZEXPORT zipClose(zipFile file, const char* global_comment) {
     zip64_internal* zi;
     int err = 0;
     uLong size_centraldir = 0;
@@ -1887,7 +1887,7 @@ extern int ZEXPORT zipClose(zipFile file, const char* global_comment) {
     return err;
 }
 
-extern int ZEXPORT zipRemoveExtraInfoBlock(char* pData, int* dataLen, short sHeader) {
+MINIZIP_EXTERN int ZEXPORT zipRemoveExtraInfoBlock(char* pData, int* dataLen, short sHeader) {
   char* p = pData;
   int size = 0;
   char* pNewHeader;
diff --git c/contrib/minizip/zip.h i/contrib/minizip/zip.h
index 5fc0841..6215b4d 100644
--- c/contrib/minizip/zip.h
+++ i/contrib/minizip/zip.h
@@ -60,6 +60,8 @@ extern "C" {
 
 #define Z_BZIP2ED 12
 
+#include "minizip_extern.h"
+
 #if defined(STRICTZIP) || defined(STRICTZIPUNZIP)
 /* like the STRICT of WIN32, we define a pointer that cannot be converted
     from (void*) without cast */
@@ -113,8 +115,8 @@ typedef const char* zipcharpc;
 #define APPEND_STATUS_CREATEAFTER   (1)
 #define APPEND_STATUS_ADDINZIP      (2)
 
-extern zipFile ZEXPORT zipOpen(const char *pathname, int append);
-extern zipFile ZEXPORT zipOpen64(const void *pathname, int append);
+MINIZIP_EXTERN zipFile ZEXPORT zipOpen(const char *pathname, int append);
+MINIZIP_EXTERN zipFile ZEXPORT zipOpen64(const void *pathname, int append);
 /*
   Create a zipfile.
      pathname contain on Windows XP a filename like "c:\\zlib\\zlib113.zip" or on
@@ -134,22 +136,22 @@ extern zipFile ZEXPORT zipOpen64(const void *pathname, int append);
    Of course, you can use RAW reading and writing to copy the file you did not want delete
 */
 
-extern zipFile ZEXPORT zipOpen2(const char *pathname,
+MINIZIP_EXTERN zipFile ZEXPORT zipOpen2(const char *pathname,
                                 int append,
                                 zipcharpc* globalcomment,
                                 zlib_filefunc_def* pzlib_filefunc_def);
 
-extern zipFile ZEXPORT zipOpen2_64(const void *pathname,
+MINIZIP_EXTERN zipFile ZEXPORT zipOpen2_64(const void *pathname,
                                    int append,
                                    zipcharpc* globalcomment,
                                    zlib_filefunc64_def* pzlib_filefunc_def);
 
-extern zipFile ZEXPORT zipOpen3(const void *pathname,
+MINIZIP_EXTERN zipFile ZEXPORT zipOpen3(const void *pathname,
                                 int append,
                                 zipcharpc* globalcomment,
                                 zlib_filefunc64_32_def* pzlib_filefunc64_32_def);
 
-extern int ZEXPORT zipOpenNewFileInZip(zipFile file,
+MINIZIP_EXTERN int ZEXPORT zipOpenNewFileInZip(zipFile file,
                                        const char* filename,
                                        const zip_fileinfo* zipfi,
                                        const void* extrafield_local,
@@ -160,7 +162,7 @@ extern int ZEXPORT zipOpenNewFileInZip(zipFile file,
                                        int method,
                                        int level);
 
-extern int ZEXPORT zipOpenNewFileInZip64(zipFile file,
+MINIZIP_EXTERN int ZEXPORT zipOpenNewFileInZip64(zipFile file,
                                          const char* filename,
                                          const zip_fileinfo* zipfi,
                                          const void* extrafield_local,
@@ -189,7 +191,7 @@ extern int ZEXPORT zipOpenNewFileInZip64(zipFile file,
 */
 
 
-extern int ZEXPORT zipOpenNewFileInZip2(zipFile file,
+MINIZIP_EXTERN int ZEXPORT zipOpenNewFileInZip2(zipFile file,
                                         const char* filename,
                                         const zip_fileinfo* zipfi,
                                         const void* extrafield_local,
@@ -202,7 +204,7 @@ extern int ZEXPORT zipOpenNewFileInZip2(zipFile file,
                                         int raw);
 
 
-extern int ZEXPORT zipOpenNewFileInZip2_64(zipFile file,
+MINIZIP_EXTERN int ZEXPORT zipOpenNewFileInZip2_64(zipFile file,
                                            const char* filename,
                                            const zip_fileinfo* zipfi,
                                            const void* extrafield_local,
@@ -218,7 +220,7 @@ extern int ZEXPORT zipOpenNewFileInZip2_64(zipFile file,
   Same than zipOpenNewFileInZip, except if raw=1, we write raw file
  */
 
-extern int ZEXPORT zipOpenNewFileInZip3(zipFile file,
+MINIZIP_EXTERN int ZEXPORT zipOpenNewFileInZip3(zipFile file,
                                         const char* filename,
                                         const zip_fileinfo* zipfi,
                                         const void* extrafield_local,
@@ -235,7 +237,7 @@ extern int ZEXPORT zipOpenNewFileInZip3(zipFile file,
                                         const char* password,
                                         uLong crcForCrypting);
 
-extern int ZEXPORT zipOpenNewFileInZip3_64(zipFile file,
+MINIZIP_EXTERN int ZEXPORT zipOpenNewFileInZip3_64(zipFile file,
                                            const char* filename,
                                            const zip_fileinfo* zipfi,
                                            const void* extrafield_local,
@@ -260,7 +262,7 @@ extern int ZEXPORT zipOpenNewFileInZip3_64(zipFile file,
     crcForCrypting : crc of file to compress (needed for crypting)
  */
 
-extern int ZEXPORT zipOpenNewFileInZip4(zipFile file,
+MINIZIP_EXTERN int ZEXPORT zipOpenNewFileInZip4(zipFile file,
                                         const char* filename,
                                         const zip_fileinfo* zipfi,
                                         const void* extrafield_local,
@@ -280,7 +282,7 @@ extern int ZEXPORT zipOpenNewFileInZip4(zipFile file,
                                         uLong flagBase);
 
 
-extern int ZEXPORT zipOpenNewFileInZip4_64(zipFile file,
+MINIZIP_EXTERN int ZEXPORT zipOpenNewFileInZip4_64(zipFile file,
                                            const char* filename,
                                            const zip_fileinfo* zipfi,
                                            const void* extrafield_local,
@@ -306,23 +308,23 @@ extern int ZEXPORT zipOpenNewFileInZip4_64(zipFile file,
  */
 
 
-extern int ZEXPORT zipWriteInFileInZip(zipFile file,
+MINIZIP_EXTERN int ZEXPORT zipWriteInFileInZip(zipFile file,
                                        const void* buf,
                                        unsigned len);
 /*
   Write data in the zipfile
 */
 
-extern int ZEXPORT zipCloseFileInZip(zipFile file);
+MINIZIP_EXTERN int ZEXPORT zipCloseFileInZip(zipFile file);
 /*
   Close the current file in the zipfile
 */
 
-extern int ZEXPORT zipCloseFileInZipRaw(zipFile file,
+MINIZIP_EXTERN int ZEXPORT zipCloseFileInZipRaw(zipFile file,
                                         uLong uncompressed_size,
                                         uLong crc32);
 
-extern int ZEXPORT zipCloseFileInZipRaw64(zipFile file,
+MINIZIP_EXTERN int ZEXPORT zipCloseFileInZipRaw64(zipFile file,
                                           ZPOS64_T uncompressed_size,
                                           uLong crc32);
 
@@ -332,14 +334,14 @@ extern int ZEXPORT zipCloseFileInZipRaw64(zipFile file,
   uncompressed_size and crc32 are value for the uncompressed size
 */
 
-extern int ZEXPORT zipClose(zipFile file,
+MINIZIP_EXTERN int ZEXPORT zipClose(zipFile file,
                             const char* global_comment);
 /*
   Close the zipfile
 */
 
 
-extern int ZEXPORT zipRemoveExtraInfoBlock(char* pData, int* dataLen, short sHeader);
+MINIZIP_EXTERN int ZEXPORT zipRemoveExtraInfoBlock(char* pData, int* dataLen, short sHeader);
 /*
   zipRemoveExtraInfoBlock -  Added by Mathias Svensson
 
