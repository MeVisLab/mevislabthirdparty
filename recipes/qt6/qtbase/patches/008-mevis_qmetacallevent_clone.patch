diff --git a/src/corelib/kernel/qobject.cpp b/src/corelib/kernel/qobject.cpp
index b4bbace8..7a2327ca 100644
--- a/src/corelib/kernel/qobject.cpp
+++ b/src/corelib/kernel/qobject.cpp
@@ -660,6 +660,58 @@ void QMetaCallEvent::placeMetaCall(QObject *object)
     }
 }
 
+// MEVIS BEGIN
+QEvent* mevis_cloneAndClearQMetaCallEvent(QEvent* event)
+{
+    if (event->type() == QEvent::MetaCall) {
+        return static_cast<QMetaCallEvent*>(event)->cloneAndClear();
+    } else {
+        return nullptr;
+    }
+}
+
+QEvent* QMetaCallEvent::cloneAndClear()
+{
+    QMetaCallEvent* newEvent = nullptr;
+    if (d.nargs_) {
+        // non-blocking call, arguments need to be copied
+        if (d.slotObj_) {
+            auto slotObjPtr = d.slotObj_.release();
+            newEvent = new QMetaCallEvent(slotObjPtr,
+                                          sender(), signalId(),
+                                          d.nargs_);
+        } else {
+            newEvent = new QMetaCallEvent(d.method_offset_, d.method_relative_, d.callFunction_,
+                                          sender(), signalId(),
+                                          d.nargs_);
+        }
+        QMetaType *sourceTypeIDs = types();
+        QMetaType *targetTypeIDs = newEvent->types();
+        void **targetArgs = newEvent->args();
+        // move args:
+        for (int i = 0; i < d.nargs_; ++i) {
+            targetTypeIDs[i] = sourceTypeIDs[i]; sourceTypeIDs[i] = {};
+            targetArgs[i] = d.args_[i]; d.args_[i] = nullptr;
+        }
+    } else {
+        // blocking call, arguments stay with sender
+        if (d.slotObj_) {
+            auto slotObjPtr = d.slotObj_.release();
+            newEvent = new QMetaCallEvent(slotObjPtr,
+                                          sender(), signalId(),
+                                          d.args_, semaphore_);
+        } else {
+            newEvent = new QMetaCallEvent(d.method_offset_, d.method_relative_, d.callFunction_,
+                                          sender(), signalId(),
+                                          d.args_, semaphore_);
+        }
+        // semaphore is moved to new event:
+        semaphore_ = nullptr;
+    }
+    return newEvent;
+}
+// MEVIS END
+
 QMetaCallEvent* QMetaCallEvent::create_impl(QtPrivate::SlotObjUniquePtr slotObj,
                                             const QObject *sender, int signal_index,
                                             size_t argc, const void* const argp[],
diff --git a/src/corelib/kernel/qobject.h b/src/corelib/kernel/qobject.h
index 6fe575f2..d3158cc1 100644
--- a/src/corelib/kernel/qobject.h
+++ b/src/corelib/kernel/qobject.h
@@ -62,6 +62,12 @@ Q_CORE_EXPORT QObject *qt_qFindChild_helper(const QObject *parent, const QString
 Q_CORE_EXPORT QObject *qt_qFindChild_helper(const QObject *parent, QAnyStringView name,
                                             const QMetaObject &mo, Qt::FindChildOptions options);
 
+// MEVIS BEGIN
+// Method added for MeVisLab to allow to clone and clear a QMetaCallEvent, which is private in Qt
+#define MEVIS_QMETACALLEVENT_HACK
+Q_CORE_EXPORT QEvent* mevis_cloneAndClearQMetaCallEvent(QEvent* event);
+// MEVIS END
+
 class Q_CORE_EXPORT QObjectData
 {
     Q_DISABLE_COPY(QObjectData)
diff --git a/src/corelib/kernel/qobject_p.h b/src/corelib/kernel/qobject_p.h
index f7886c7c..e102c6f3 100644
--- a/src/corelib/kernel/qobject_p.h
+++ b/src/corelib/kernel/qobject_p.h
@@ -358,6 +358,7 @@ public:
 private:
     int signalId_;
     const QObject *sender_;
+protected:  // added by MeVis to allow access from QMetaCallEvent    
 #if QT_CONFIG(thread)
     QSemaphore *semaphore_;
 #endif
@@ -419,6 +420,12 @@ public:
 
     virtual void placeMetaCall(QObject *object) override;
 
+    // MEVIS BEGIN
+    //! Returns a cloned QMetaCallEvent and clears the data of the original event.
+    //! Added for MeVis use case, used in mevis_cloneAndClearQMetaCallEvent
+    QEvent* cloneAndClear();
+    // MEVIS END
+
 private:
     static QMetaCallEvent *create_impl(QtPrivate::QSlotObjectBase *slotObj, const QObject *sender,
                                        int signal_index, size_t argc, const void * const argp[],
