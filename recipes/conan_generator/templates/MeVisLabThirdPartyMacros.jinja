#
# {{ header_date }}
#

if(NOT DEFINED MEVISLAB_THIRDPARTY_ROOT_DIR)
    get_filename_component(_mlab_install_prefix "${CMAKE_CURRENT_LIST_DIR}/../../.." ABSOLUTE)
    set(MEVISLAB_THIRDPARTY_ROOT_DIR "${_mlab_install_prefix}/MeVis/ThirdParty")
endif()

include(CMakeFindDependencyMacro)

function(mlab_thirdparty_message MESSAGE_OUTPUT)
    if(MLAB_THIRDPARTY_DEBUG_MESSAGE_OUTPUT)
        message(${ARGV${0}})
    endif()
endfunction()

macro(mlab_find_apple_frameworks FRAMEWORKS_FOUND FRAMEWORKS FRAMEWORKS_DIRS)
    if(APPLE)
        foreach(_FRAMEWORK ${FRAMEWORKS})
            find_library(MLAB_FRAMEWORK_${_FRAMEWORK}_FOUND NAME ${_FRAMEWORK} PATHS ${FRAMEWORKS_DIRS} CMAKE_FIND_ROOT_PATH_BOTH)
            if(MLAB_FRAMEWORK_${_FRAMEWORK}_FOUND)
                list(APPEND ${FRAMEWORKS_FOUND} ${MLAB_FRAMEWORK_${_FRAMEWORK}_FOUND})
            else()
                message(FATAL_ERROR "Framework library ${_FRAMEWORK} not found in paths: ${FRAMEWORKS_DIRS}")
            endif()
        endforeach()
    endif()
endmacro()

function(mlab_package_library_targets libraries package_libdir deps out_libraries out_libraries_target build_type package_name)
    unset(_MLAB_ACTUAL_TARGETS CACHE)
    unset(_MLAB_FOUND_SYSTEM_LIBS CACHE)
    foreach(_LIBRARY_NAME ${libraries})
        find_library(MLAB_FOUND_LIBRARY NAME ${_LIBRARY_NAME} PATHS ${package_libdir} NO_DEFAULT_PATH NO_CMAKE_FIND_ROOT_PATH)
        if(MLAB_FOUND_LIBRARY)
            mlab_thirdparty_message(STATUS "Library ${_LIBRARY_NAME} found ${MLAB_FOUND_LIBRARY}")
            list(APPEND _out_libraries ${MLAB_FOUND_LIBRARY})
            if(NOT ${CMAKE_VERSION} VERSION_LESS "3.0")
                set(_LIB_NAME MLAB_LIB::${package_name}_${_LIBRARY_NAME}${build_type})
                if(NOT TARGET ${_LIB_NAME})
                    add_library(${_LIB_NAME} UNKNOWN IMPORTED)
                    set_target_properties(${_LIB_NAME} PROPERTIES IMPORTED_LOCATION ${MLAB_FOUND_LIBRARY})
                    set(_MLAB_ACTUAL_TARGETS ${_MLAB_ACTUAL_TARGETS} ${_LIB_NAME})
                else()
                    mlab_thirdparty_message(STATUS "Skipping already existing target: ${_LIB_NAME}")
                endif()
                list(APPEND _out_libraries_target ${_LIB_NAME})
            endif()
            mlab_thirdparty_message(STATUS "Found: ${MLAB_FOUND_LIBRARY}")
        else()
            mlab_thirdparty_message(STATUS "Library ${_LIBRARY_NAME} not found in package, might be system one")
            list(APPEND _out_libraries_target ${_LIBRARY_NAME})
            list(APPEND _out_libraries ${_LIBRARY_NAME})
            set(_MLAB_FOUND_SYSTEM_LIBS "${_MLAB_FOUND_SYSTEM_LIBS};${_LIBRARY_NAME}")
        endif()
        unset(MLAB_FOUND_LIBRARY CACHE)
    endforeach()

    string(REPLACE " " ";" deps_list "${deps}")
    foreach(_MLAB_ACTUAL_TARGET ${_MLAB_ACTUAL_TARGETS})
        set_property(TARGET ${_MLAB_ACTUAL_TARGET} PROPERTY INTERFACE_LINK_LIBRARIES "${_MLAB_FOUND_SYSTEM_LIBS};${deps_list}")
    endforeach()

    set(${out_libraries} ${_out_libraries} PARENT_SCOPE)
    set(${out_libraries_target} ${_out_libraries_target} PARENT_SCOPE)
endfunction()
