#
# {{ header_date }}
#
{% macro replace_pkg_root_path(path) -%}
{{path | replace(pkg_rootpath, "${MEVISLAB_" + name + "_ROOTDIR"+build_type_suffix+"}")}}
{%- endmacro %}

include("${CMAKE_CURRENT_LIST_DIR}/MeVisLabThirdPartyMacros.cmake")

if(NOT DEFINED MEVISLAB_{{ name }}_ROOTDIR{{build_type_suffix}})
{% if name == 'Qt5Dummy' %}
    set(MEVISLAB_{{ name }}_ROOTDIR{{build_type_suffix}} "${MEVISLAB_THIRDPARTY_ROOT_DIR}")
{% elif name == 'python' or name == 'numpy' %}
    if(WIN32)
        set(MEVISLAB_{{ name }}_ROOTDIR{{build_type_suffix}} "${MEVISLAB_THIRDPARTY_ROOT_DIR}/Python")
    else()
        set(MEVISLAB_{{ name }}_ROOTDIR{{build_type_suffix}} "${MEVISLAB_THIRDPARTY_ROOT_DIR}/Python/{{ build_type | capitalize }}")
    endif()
{% else %}
    set(MEVISLAB_{{ name }}_ROOTDIR{{build_type_suffix}} "${MEVISLAB_THIRDPARTY_ROOT_DIR}")
{% endif %}
endif()

set({{ name }}_INCLUDE_DIRS{{ build_type_suffix }} {{ replace_pkg_root_path(deps.include_paths) }})
set({{ name }}_INCLUDE_DIR{{ build_type_suffix }} {{ replace_pkg_root_path(deps.include_path) }})
set({{ name }}_INCLUDES{{ build_type_suffix }} {{ replace_pkg_root_path(deps.include_paths) }})
set({{ name }}_RES_DIRS{{ build_type_suffix }} {{ replace_pkg_root_path(deps.res_paths) }})
set({{ name }}_DEFINITIONS{{ build_type_suffix }} {{ deps.defines }})
set({{ name }}_LINKER_FLAGS{{ build_type_suffix }}_LIST
  "$<$<STREQUAL:$<TARGET_PROPERTY:TYPE>,SHARED_LIBRARY>:{{ deps.sharedlinkflags_list }}>"
  "$<$<STREQUAL:$<TARGET_PROPERTY:TYPE>,MODULE_LIBRARY>:{{ deps.sharedlinkflags_list }}>"
  "$<$<STREQUAL:$<TARGET_PROPERTY:TYPE>,EXECUTABLE>:{{ deps.exelinkflags_list }}>"
)
set({{ name }}_COMPILE_DEFINITIONS{{ build_type_suffix }} {{ deps.compile_definitions }})
set({{ name }}_COMPILE_OPTIONS{{ build_type_suffix }}_LIST "{{ deps.cxxflags_list }}" "{{ deps.cflags_list }}")
set({{ name }}_COMPILE_OPTIONS_C{{ build_type_suffix }} "{{ deps.cflags_list }}")
set({{ name }}_COMPILE_OPTIONS_CXX{{ build_type_suffix }} "{{ deps.cxxflags_list }}")
set({{ name }}_LIBRARIES_TARGETS{{ build_type_suffix }} "")
set({{ name }}_LIBRARIES{{ build_type_suffix }} "")
set({{ name }}_LIBS{{ build_type_suffix }} "")
set({{ name }}_SYSTEM_LIBS{{ build_type_suffix }} {{ deps.system_libs }})
set({{ name }}_FRAMEWORK_DIRS{{ build_type_suffix }} {{ deps.framework_paths }})
set({{ name }}_FRAMEWORKS{{ build_type_suffix }} {{ deps.frameworks }})
set({{ name }}_FRAMEWORKS_FOUND{{ build_type_suffix }} "")
set({{ name }}_BUILD_MODULES_PATHS{{ build_type_suffix }} {{ deps.build_modules_paths }})

mlab_find_apple_frameworks({{ name }}_FRAMEWORKS_FOUND{{ build_type_suffix }} "{{ '${' }}{{ name }}_FRAMEWORKS{{ build_type_suffix }}}" "{{ '${' }}{{ name }}_FRAMEWORK_DIRS{{ build_type_suffix }}}")

mark_as_advanced(MEVISLAB_{{ name }}_ROOTDIR{{build_type_suffix}}
                 {{ name }}_INCLUDE_DIRS{{ build_type_suffix }}
                 {{ name }}_INCLUDE_DIR{{ build_type_suffix }}
                 {{ name }}_INCLUDES{{ build_type_suffix }}
                 {{ name }}_DEFINITIONS{{ build_type_suffix }}
                 {{ name }}_LINKER_FLAGS{{ build_type_suffix }}_LIST
                 {{ name }}_COMPILE_DEFINITIONS{{ build_type_suffix }}
                 {{ name }}_COMPILE_OPTIONS{{ build_type_suffix }}_LIST
                 {{ name }}_LIBRARIES{{ build_type_suffix }}
                 {{ name }}_LIBS{{ build_type_suffix }}
                 {{ name }}_LIBRARIES_TARGETS{{ build_type_suffix }})

set({{ name }}_LIBRARY_LIST{{ build_type_suffix }} {{ deps.libs }})
set({{ name }}_LIB_DIRS{{ build_type_suffix }} {{ replace_pkg_root_path(deps.lib_paths) }})

set(_{{ name }}_DEPENDENCIES{{ build_type_suffix }} "{{ '${' }}{{ name }}_FRAMEWORKS_FOUND{{ build_type_suffix }}} {{ '${' }}{{ name }}_SYSTEM_LIBS{{ build_type_suffix }}} {{ deps_names }}")

mlab_package_library_targets(
    "{{ '${' }}{{ name }}_LIBRARY_LIST{{ build_type_suffix }}}"
    "{{ '${' }}{{ name }}_LIB_DIRS{{ build_type_suffix }}}"
    "{{ '${' }}_{{ name }}_DEPENDENCIES{{ build_type_suffix }}}"
    {{ name }}_LIBRARIES{{ build_type_suffix }}
    {{ name }}_LIBRARIES_TARGETS{{ build_type_suffix }}
    "{{ build_type_suffix }}"
    "{{ name }}"
)

set({{ name }}_LIBS{{ build_type_suffix }} {{ '${' }}{{ name }}_LIBRARIES{{ build_type_suffix }}})

foreach(_FRAMEWORK {{ '${' }}{{ name }}_FRAMEWORKS_FOUND{{ build_type_suffix }}})
  list(APPEND {{ name }}_LIBRARIES_TARGETS{{ build_type_suffix }} ${_FRAMEWORK})
  list(APPEND {{ name }}_LIBRARIES{{ build_type_suffix }} ${_FRAMEWORK})
endforeach()

foreach(_SYSTEM_LIB {{ '${' }}{{ name }}_SYSTEM_LIBS{{ build_type_suffix }}})
  list(APPEND {{ name }}_LIBRARIES_TARGETS{{ build_type_suffix }} ${_SYSTEM_LIB})
  list(APPEND {{ name }}_LIBRARIES{{ build_type_suffix }} ${_SYSTEM_LIB})
endforeach()

set({{ name }}_LIBRARIES_TARGETS{{ build_type_suffix }} "{{ '${' }}{{ name }}_LIBRARIES_TARGETS{{ build_type_suffix }}};{{ deps_names }}")
set({{ name }}_LIBRARIES{{ build_type_suffix }} "{{ '${' }}{{ name }}_LIBRARIES{{ build_type_suffix }}};{{ deps_names }}")

foreach(_BUILD_MODULE_PATH {{ '${' }}{{ name }}_BUILD_MODULES_PATHS{{ build_type_suffix }}})
    include(${_BUILD_MODULE_PATH})
endforeach()
{% if components %}

set({{ name }}_COMPONENTS{{ build_type_suffix }} {{ pkg_components }})

{% for comp_name, comp in components %}
#######################################################
### {{ name }}::{{ comp_name }}
#######################################################

set({{ name }}_{{ comp_name }}_INCLUDE_DIRS{{ build_type_suffix }} {{ replace_pkg_root_path(comp.include_paths) }})
set({{ name }}_{{ comp_name }}_INCLUDE_DIR{{ build_type_suffix }} {{ replace_pkg_root_path(comp.include_path) }})
set({{ name }}_{{ comp_name }}_INCLUDES{{ build_type_suffix }} {{ replace_pkg_root_path(comp.include_paths) }})
set({{ name }}_{{ comp_name }}_LIB_DIRS{{ build_type_suffix }} {{ replace_pkg_root_path(comp.lib_paths) }})
set({{ name }}_{{ comp_name }}_RES_DIRS{{ build_type_suffix }} {{ replace_pkg_root_path(comp.res_paths) }})
set({{ name }}_{{ comp_name }}_DEFINITIONS{{ build_type_suffix }} {{ comp.defines }})
set({{ name }}_{{ comp_name }}_COMPILE_DEFINITIONS{{ build_type_suffix }} {{ comp.compile_definitions }})
set({{ name }}_{{ comp_name }}_COMPILE_OPTIONS_C{{ build_type_suffix }} "{{ comp.cflags_list }}")
set({{ name }}_{{ comp_name }}_COMPILE_OPTIONS_CXX{{ build_type_suffix }} "{{ comp.cxxflags_list }}")
set({{ name }}_{{ comp_name }}_LIBS{{ build_type_suffix }} {{ comp.libs }})
set({{ name }}_{{ comp_name }}_SYSTEM_LIBS{{ build_type_suffix }} {{ comp.system_libs }})
set({{ name }}_{{ comp_name }}_FRAMEWORK_DIRS{{ build_type_suffix }} {{ comp.framework_paths }})
set({{ name }}_{{ comp_name }}_FRAMEWORKS{{ build_type_suffix }} {{ comp.frameworks }})
set({{ name }}_{{ comp_name }}_BUILD_MODULES_PATHS{{ build_type_suffix }} {{ comp.build_modules_paths }})
set({{ name }}_{{ comp_name }}_DEPENDENCIES{{ build_type_suffix }} {{ comp.public_deps }})
set({{ name }}_{{ comp_name }}_LINKER_FLAGS_LIST{{ build_type_suffix }}
  $<$<STREQUAL:$<TARGET_PROPERTY:TYPE>,SHARED_LIBRARY>:{{ comp.sharedlinkflags_list }}>
  $<$<STREQUAL:$<TARGET_PROPERTY:TYPE>,MODULE_LIBRARY>:{{ comp.sharedlinkflags_list }}>
  $<$<STREQUAL:$<TARGET_PROPERTY:TYPE>,EXECUTABLE>:{{ comp.exelinkflags_list }}>
)
set({{ name }}_{{ comp_name }}_FRAMEWORKS_FOUND{{ build_type_suffix }} "")
mlab_find_apple_frameworks({{ name }}_{{ comp_name }}_FRAMEWORKS_FOUND{{ build_type_suffix }} "{{ '${'+name+'_'+comp_name+'_FRAMEWORKS_'+build_type+'}' }}" "{{ '${'+name+'_'+comp_name+'_FRAMEWORK_DIRS_'+build_type+'}' }}")

set({{ name }}_{{ comp_name }}_LIB_TARGETS{{ build_type_suffix }} "")
set({{ name }}_{{ comp_name }}_NOT_USED{{ build_type_suffix }} "")
set({{ name }}_{{ comp_name }}_LIBS_FRAMEWORKS_DEPS{{ build_type_suffix }} {{ '${'+name+'_'+comp_name+'_FRAMEWORKS_FOUND_'+build_type+'}' }} {{ '${'+name+'_'+comp_name+'_SYSTEM_LIBS_'+build_type+'}' }} {{ '${'+name+'_'+comp_name+'_DEPENDENCIES_'+build_type+'}' }})
mlab_package_library_targets(
  "{{ '${'+name+'_'+comp_name+'_LIBS_'+build_type+'}' }}"
  "{{ '${'+name+'_'+comp_name+'_LIB_DIRS_'+build_type+'}' }}"
  "{{ '${'+name+'_'+comp_name+'_LIBS_FRAMEWORKS_DEPS_'+build_type+'}' }}"
  {{ name }}_{{ comp_name }}_NOT_USED{{ build_type_suffix }}
  {{ name }}_{{ comp_name }}_LIB_TARGETS{{ build_type_suffix }}
  "{{ build_type }}"
  "{{ name }}_{{ comp_name }}"
)

set({{ name }}_{{ comp_name }}_LINK_LIBS{{ build_type_suffix }} {{ '${'+name+'_'+comp_name+'_LIB_TARGETS_'+build_type+'}' }} {{ '${'+name+'_'+comp_name+'_LIBS_FRAMEWORKS_DEPS_'+build_type+'}' }})

{% endfor %}

if({{ name }}_FIND_COMPONENTS)
  foreach(_FIND_COMPONENT {{ '${'}}{{ name }}_FIND_COMPONENTS})
    if(NOT "{{ name }}::${_FIND_COMPONENT}" IN_LIST {{ name }}_COMPONENTS{{ build_type_suffix }})
      message(FATAL_ERROR "MeVisLab: Component '${_FIND_COMPONENT}' NOT found in package '{{ name }}'")
    else()
      set({{ name }}_${_FIND_COMPONENT}_FOUND TRUE)
      mlab_thirdparty_message(STATUS "MeVisLab: Component '${_FIND_COMPONENT}' found in package '{{ name }}'")
    endif()
  endforeach()
endif()

{% endif %}
